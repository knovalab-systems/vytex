package utils

import (
	"net/http"

	"github.com/labstack/echo/v4"
)

// RFC 9457

type ProblemDetails struct {
	// Type is a URI reference [RFC3986] that identifies the
	// problem type. This specification encourages that, when
	// dereferenced, it provide human-readable documentation for the
	// problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
	// this member is not present, its value is assumed to be
	// "about:blank".
	Type string `json:"type"`
	// Title is a short, human-readable summary of the problem
	// type.  It SHOULD NOT change from occurrence to occurrence of the
	// problem, except for purposes of localization (e.g., using
	// proactive content negotiation; see [RFC7231], Section 3.4).
	Title string `json:"title"`
	// Status is the HTTP status code ([RFC7231], Section 6)
	// generated by the origin server for this occurrence of the problem.
	Status int `json:"status,omitempty"`
	// Detail is a human-readable explanation specific to this
	// occurrence of the problem.
	// If present, it ought to focus on helping the client
	// correct the problem, rather than giving debugging information.
	Detail string `json:"detail,omitempty"`
	// Instance is a URI reference that identifies the specific
	// occurrence of the problem.  It may or may not yield further
	// information if dereferenced.
	Instance string `json:"instance,omitempty"`
}

// New creates a new ProblemDetails error
func New(statusCode int, problemType, title, detail, instance string) *ProblemDetails {
	// When this member is not present, its value is assumed to be
	// "about:blank".
	if problemType == "" {
		problemType = "about:blank"
	}

	// When "about:blank" is used, the title SHOULD be the same as the
	// recommended HTTP status phrase for that code (e.g., "Not Found" for
	// 404, and so on), although it MAY be localized to suit client
	// preferences (expressed with the Accept-Language request header).
	if problemType == "about:blank" {
		title = http.StatusText(statusCode)
	}

	return &ProblemDetails{
		Type:     problemType,
		Title:    title,
		Status:   statusCode,
		Detail:   detail,
		Instance: instance,
	}
}

// NewHTTPError creates response with a new ProblemDetails error based just the HTTP Status Code
func NewHTTPError(statusCode int) *echo.HTTPError {
	return echo.NewHTTPError(statusCode, New(statusCode, "", "", "", ""))
}

// NewHTTP creates response with a new ProblemDetail
func NewHTTPErrorDetail(statusCode int, problemType, title, detail, instance string) *echo.HTTPError {
	return echo.NewHTTPError(statusCode, &ProblemDetails{
		Type:     problemType,
		Title:    title,
		Status:   statusCode,
		Detail:   detail,
		Instance: instance,
	})
}
