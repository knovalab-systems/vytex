// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newOrderState(db *gorm.DB, opts ...gen.DOOption) orderState {
	_orderState := orderState{}

	_orderState.orderStateDo.UseDB(db, opts...)
	_orderState.orderStateDo.UseModel(&models.OrderState{})

	tableName := _orderState.orderStateDo.TableName()
	_orderState.ALL = field.NewAsterisk(tableName)
	_orderState.ID = field.NewUint(tableName, "id")
	_orderState.Name = field.NewString(tableName, "name")
	_orderState.Value = field.NewString(tableName, "value")

	_orderState.fillFieldMap()

	return _orderState
}

type orderState struct {
	orderStateDo

	ALL   field.Asterisk
	ID    field.Uint
	Name  field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (o orderState) Table(newTableName string) *orderState {
	o.orderStateDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderState) As(alias string) *orderState {
	o.orderStateDo.DO = *(o.orderStateDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderState) updateTableName(table string) *orderState {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.Name = field.NewString(table, "name")
	o.Value = field.NewString(table, "value")

	o.fillFieldMap()

	return o
}

func (o *orderState) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderState) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["value"] = o.Value
}

func (o orderState) clone(db *gorm.DB) orderState {
	o.orderStateDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderState) replaceDB(db *gorm.DB) orderState {
	o.orderStateDo.ReplaceDB(db)
	return o
}

type orderStateDo struct{ gen.DO }

type IOrderStateDo interface {
	gen.SubQuery
	Debug() IOrderStateDo
	WithContext(ctx context.Context) IOrderStateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderStateDo
	WriteDB() IOrderStateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderStateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderStateDo
	Not(conds ...gen.Condition) IOrderStateDo
	Or(conds ...gen.Condition) IOrderStateDo
	Select(conds ...field.Expr) IOrderStateDo
	Where(conds ...gen.Condition) IOrderStateDo
	Order(conds ...field.Expr) IOrderStateDo
	Distinct(cols ...field.Expr) IOrderStateDo
	Omit(cols ...field.Expr) IOrderStateDo
	Join(table schema.Tabler, on ...field.Expr) IOrderStateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderStateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderStateDo
	Group(cols ...field.Expr) IOrderStateDo
	Having(conds ...gen.Condition) IOrderStateDo
	Limit(limit int) IOrderStateDo
	Offset(offset int) IOrderStateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderStateDo
	Unscoped() IOrderStateDo
	Create(values ...*models.OrderState) error
	CreateInBatches(values []*models.OrderState, batchSize int) error
	Save(values ...*models.OrderState) error
	First() (*models.OrderState, error)
	Take() (*models.OrderState, error)
	Last() (*models.OrderState, error)
	Find() ([]*models.OrderState, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderState, err error)
	FindInBatches(result *[]*models.OrderState, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OrderState) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderStateDo
	Assign(attrs ...field.AssignExpr) IOrderStateDo
	Joins(fields ...field.RelationField) IOrderStateDo
	Preload(fields ...field.RelationField) IOrderStateDo
	FirstOrInit() (*models.OrderState, error)
	FirstOrCreate() (*models.OrderState, error)
	FindByPage(offset int, limit int) (result []*models.OrderState, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderStateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderStateDo) Debug() IOrderStateDo {
	return o.withDO(o.DO.Debug())
}

func (o orderStateDo) WithContext(ctx context.Context) IOrderStateDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderStateDo) ReadDB() IOrderStateDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderStateDo) WriteDB() IOrderStateDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderStateDo) Session(config *gorm.Session) IOrderStateDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderStateDo) Clauses(conds ...clause.Expression) IOrderStateDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderStateDo) Returning(value interface{}, columns ...string) IOrderStateDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderStateDo) Not(conds ...gen.Condition) IOrderStateDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderStateDo) Or(conds ...gen.Condition) IOrderStateDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderStateDo) Select(conds ...field.Expr) IOrderStateDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderStateDo) Where(conds ...gen.Condition) IOrderStateDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderStateDo) Order(conds ...field.Expr) IOrderStateDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderStateDo) Distinct(cols ...field.Expr) IOrderStateDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderStateDo) Omit(cols ...field.Expr) IOrderStateDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderStateDo) Join(table schema.Tabler, on ...field.Expr) IOrderStateDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderStateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderStateDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderStateDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderStateDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderStateDo) Group(cols ...field.Expr) IOrderStateDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderStateDo) Having(conds ...gen.Condition) IOrderStateDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderStateDo) Limit(limit int) IOrderStateDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderStateDo) Offset(offset int) IOrderStateDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderStateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderStateDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderStateDo) Unscoped() IOrderStateDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderStateDo) Create(values ...*models.OrderState) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderStateDo) CreateInBatches(values []*models.OrderState, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderStateDo) Save(values ...*models.OrderState) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderStateDo) First() (*models.OrderState, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderState), nil
	}
}

func (o orderStateDo) Take() (*models.OrderState, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderState), nil
	}
}

func (o orderStateDo) Last() (*models.OrderState, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderState), nil
	}
}

func (o orderStateDo) Find() ([]*models.OrderState, error) {
	result, err := o.DO.Find()
	return result.([]*models.OrderState), err
}

func (o orderStateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderState, err error) {
	buf := make([]*models.OrderState, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderStateDo) FindInBatches(result *[]*models.OrderState, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderStateDo) Attrs(attrs ...field.AssignExpr) IOrderStateDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderStateDo) Assign(attrs ...field.AssignExpr) IOrderStateDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderStateDo) Joins(fields ...field.RelationField) IOrderStateDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderStateDo) Preload(fields ...field.RelationField) IOrderStateDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderStateDo) FirstOrInit() (*models.OrderState, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderState), nil
	}
}

func (o orderStateDo) FirstOrCreate() (*models.OrderState, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderState), nil
	}
}

func (o orderStateDo) FindByPage(offset int, limit int) (result []*models.OrderState, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderStateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderStateDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderStateDo) Delete(models ...*models.OrderState) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderStateDo) withDO(do gen.Dao) *orderStateDo {
	o.DO = *do.(*gen.DO)
	return o
}
