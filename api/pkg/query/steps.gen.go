// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newStep(db *gorm.DB, opts ...gen.DOOption) step {
	_step := step{}

	_step.stepDo.UseDB(db, opts...)
	_step.stepDo.UseModel(&models.Step{})

	tableName := _step.stepDo.TableName()
	_step.ALL = field.NewAsterisk(tableName)
	_step.ID = field.NewUint(tableName, "id")
	_step.Name = field.NewString(tableName, "name")
	_step.Value = field.NewString(tableName, "value")
	_step.Tasks = stepHasManyTasks{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Tasks", "models.Task"),
		Step: struct {
			field.RelationField
			Tasks struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Tasks.Step", "models.Step"),
			Tasks: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Tasks.Step.Tasks", "models.Task"),
			},
		},
	}

	_step.fillFieldMap()

	return _step
}

type step struct {
	stepDo

	ALL   field.Asterisk
	ID    field.Uint
	Name  field.String
	Value field.String
	Tasks stepHasManyTasks

	fieldMap map[string]field.Expr
}

func (s step) Table(newTableName string) *step {
	s.stepDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s step) As(alias string) *step {
	s.stepDo.DO = *(s.stepDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *step) updateTableName(table string) *step {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.Name = field.NewString(table, "name")
	s.Value = field.NewString(table, "value")

	s.fillFieldMap()

	return s
}

func (s *step) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *step) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["value"] = s.Value

}

func (s step) clone(db *gorm.DB) step {
	s.stepDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s step) replaceDB(db *gorm.DB) step {
	s.stepDo.ReplaceDB(db)
	return s
}

type stepHasManyTasks struct {
	db *gorm.DB

	field.RelationField

	Step struct {
		field.RelationField
		Tasks struct {
			field.RelationField
		}
	}
}

func (a stepHasManyTasks) Where(conds ...field.Expr) *stepHasManyTasks {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a stepHasManyTasks) WithContext(ctx context.Context) *stepHasManyTasks {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a stepHasManyTasks) Session(session *gorm.Session) *stepHasManyTasks {
	a.db = a.db.Session(session)
	return &a
}

func (a stepHasManyTasks) Model(m *models.Step) *stepHasManyTasksTx {
	return &stepHasManyTasksTx{a.db.Model(m).Association(a.Name())}
}

type stepHasManyTasksTx struct{ tx *gorm.Association }

func (a stepHasManyTasksTx) Find() (result []*models.Task, err error) {
	return result, a.tx.Find(&result)
}

func (a stepHasManyTasksTx) Append(values ...*models.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a stepHasManyTasksTx) Replace(values ...*models.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a stepHasManyTasksTx) Delete(values ...*models.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a stepHasManyTasksTx) Clear() error {
	return a.tx.Clear()
}

func (a stepHasManyTasksTx) Count() int64 {
	return a.tx.Count()
}

type stepDo struct{ gen.DO }

type IStepDo interface {
	gen.SubQuery
	Debug() IStepDo
	WithContext(ctx context.Context) IStepDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStepDo
	WriteDB() IStepDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStepDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStepDo
	Not(conds ...gen.Condition) IStepDo
	Or(conds ...gen.Condition) IStepDo
	Select(conds ...field.Expr) IStepDo
	Where(conds ...gen.Condition) IStepDo
	Order(conds ...field.Expr) IStepDo
	Distinct(cols ...field.Expr) IStepDo
	Omit(cols ...field.Expr) IStepDo
	Join(table schema.Tabler, on ...field.Expr) IStepDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStepDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStepDo
	Group(cols ...field.Expr) IStepDo
	Having(conds ...gen.Condition) IStepDo
	Limit(limit int) IStepDo
	Offset(offset int) IStepDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStepDo
	Unscoped() IStepDo
	Create(values ...*models.Step) error
	CreateInBatches(values []*models.Step, batchSize int) error
	Save(values ...*models.Step) error
	First() (*models.Step, error)
	Take() (*models.Step, error)
	Last() (*models.Step, error)
	Find() ([]*models.Step, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Step, err error)
	FindInBatches(result *[]*models.Step, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Step) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStepDo
	Assign(attrs ...field.AssignExpr) IStepDo
	Joins(fields ...field.RelationField) IStepDo
	Preload(fields ...field.RelationField) IStepDo
	FirstOrInit() (*models.Step, error)
	FirstOrCreate() (*models.Step, error)
	FindByPage(offset int, limit int) (result []*models.Step, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStepDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stepDo) Debug() IStepDo {
	return s.withDO(s.DO.Debug())
}

func (s stepDo) WithContext(ctx context.Context) IStepDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stepDo) ReadDB() IStepDo {
	return s.Clauses(dbresolver.Read)
}

func (s stepDo) WriteDB() IStepDo {
	return s.Clauses(dbresolver.Write)
}

func (s stepDo) Session(config *gorm.Session) IStepDo {
	return s.withDO(s.DO.Session(config))
}

func (s stepDo) Clauses(conds ...clause.Expression) IStepDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stepDo) Returning(value interface{}, columns ...string) IStepDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stepDo) Not(conds ...gen.Condition) IStepDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stepDo) Or(conds ...gen.Condition) IStepDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stepDo) Select(conds ...field.Expr) IStepDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stepDo) Where(conds ...gen.Condition) IStepDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stepDo) Order(conds ...field.Expr) IStepDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stepDo) Distinct(cols ...field.Expr) IStepDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stepDo) Omit(cols ...field.Expr) IStepDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stepDo) Join(table schema.Tabler, on ...field.Expr) IStepDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stepDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStepDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stepDo) RightJoin(table schema.Tabler, on ...field.Expr) IStepDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stepDo) Group(cols ...field.Expr) IStepDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stepDo) Having(conds ...gen.Condition) IStepDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stepDo) Limit(limit int) IStepDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stepDo) Offset(offset int) IStepDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stepDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStepDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stepDo) Unscoped() IStepDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stepDo) Create(values ...*models.Step) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stepDo) CreateInBatches(values []*models.Step, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stepDo) Save(values ...*models.Step) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stepDo) First() (*models.Step, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Step), nil
	}
}

func (s stepDo) Take() (*models.Step, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Step), nil
	}
}

func (s stepDo) Last() (*models.Step, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Step), nil
	}
}

func (s stepDo) Find() ([]*models.Step, error) {
	result, err := s.DO.Find()
	return result.([]*models.Step), err
}

func (s stepDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Step, err error) {
	buf := make([]*models.Step, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stepDo) FindInBatches(result *[]*models.Step, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stepDo) Attrs(attrs ...field.AssignExpr) IStepDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stepDo) Assign(attrs ...field.AssignExpr) IStepDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stepDo) Joins(fields ...field.RelationField) IStepDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stepDo) Preload(fields ...field.RelationField) IStepDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stepDo) FirstOrInit() (*models.Step, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Step), nil
	}
}

func (s stepDo) FirstOrCreate() (*models.Step, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Step), nil
	}
}

func (s stepDo) FindByPage(offset int, limit int) (result []*models.Step, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stepDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stepDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stepDo) Delete(models ...*models.Step) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stepDo) withDO(do gen.Dao) *stepDo {
	s.DO = *do.(*gen.DO)
	return s
}
