// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newResourceByReference(db *gorm.DB, opts ...gen.DOOption) resourceByReference {
	_resourceByReference := resourceByReference{}

	_resourceByReference.resourceByReferenceDo.UseDB(db, opts...)
	_resourceByReference.resourceByReferenceDo.UseModel(&models.ResourceByReference{})

	tableName := _resourceByReference.resourceByReferenceDo.TableName()
	_resourceByReference.ALL = field.NewAsterisk(tableName)
	_resourceByReference.ID = field.NewUint(tableName, "id")
	_resourceByReference.Code = field.NewString(tableName, "code")
	_resourceByReference.DeletedAt = field.NewField(tableName, "deleted_at")
	_resourceByReference.ColorByReferenceID = field.NewUint(tableName, "color_by_reference_id")
	_resourceByReference.ResourceId = field.NewUint(tableName, "resource_id")
	_resourceByReference.XS2 = field.NewFloat64(tableName, "xs2")
	_resourceByReference.XS = field.NewFloat64(tableName, "xs")
	_resourceByReference.S = field.NewFloat64(tableName, "s")
	_resourceByReference.M = field.NewFloat64(tableName, "m")
	_resourceByReference.L = field.NewFloat64(tableName, "l")
	_resourceByReference.XL = field.NewFloat64(tableName, "xl")
	_resourceByReference.XL2 = field.NewFloat64(tableName, "xl2")
	_resourceByReference.XL3 = field.NewFloat64(tableName, "xl3")
	_resourceByReference.XL4 = field.NewFloat64(tableName, "xl4")
	_resourceByReference.XL5 = field.NewFloat64(tableName, "xl5")
	_resourceByReference.XL6 = field.NewFloat64(tableName, "xl6")
	_resourceByReference.XL7 = field.NewFloat64(tableName, "xl7")
	_resourceByReference.XL8 = field.NewFloat64(tableName, "xl8")
	_resourceByReference.Resource = resourceByReferenceBelongsToResource{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Resource", "models.Resource"),
		Color: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Resource.Color", "models.Color"),
		},
		Supplier: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Resource.Supplier", "models.Supplier"),
		},
	}

	_resourceByReference.fillFieldMap()

	return _resourceByReference
}

type resourceByReference struct {
	resourceByReferenceDo

	ALL                field.Asterisk
	ID                 field.Uint
	Code               field.String
	DeletedAt          field.Field
	ColorByReferenceID field.Uint
	ResourceId         field.Uint
	XS2                field.Float64
	XS                 field.Float64
	S                  field.Float64
	M                  field.Float64
	L                  field.Float64
	XL                 field.Float64
	XL2                field.Float64
	XL3                field.Float64
	XL4                field.Float64
	XL5                field.Float64
	XL6                field.Float64
	XL7                field.Float64
	XL8                field.Float64
	Resource           resourceByReferenceBelongsToResource

	fieldMap map[string]field.Expr
}

func (r resourceByReference) Table(newTableName string) *resourceByReference {
	r.resourceByReferenceDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resourceByReference) As(alias string) *resourceByReference {
	r.resourceByReferenceDo.DO = *(r.resourceByReferenceDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resourceByReference) updateTableName(table string) *resourceByReference {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.Code = field.NewString(table, "code")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.ColorByReferenceID = field.NewUint(table, "color_by_reference_id")
	r.ResourceId = field.NewUint(table, "resource_id")
	r.XS2 = field.NewFloat64(table, "xs2")
	r.XS = field.NewFloat64(table, "xs")
	r.S = field.NewFloat64(table, "s")
	r.M = field.NewFloat64(table, "m")
	r.L = field.NewFloat64(table, "l")
	r.XL = field.NewFloat64(table, "xl")
	r.XL2 = field.NewFloat64(table, "xl2")
	r.XL3 = field.NewFloat64(table, "xl3")
	r.XL4 = field.NewFloat64(table, "xl4")
	r.XL5 = field.NewFloat64(table, "xl5")
	r.XL6 = field.NewFloat64(table, "xl6")
	r.XL7 = field.NewFloat64(table, "xl7")
	r.XL8 = field.NewFloat64(table, "xl8")

	r.fillFieldMap()

	return r
}

func (r *resourceByReference) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resourceByReference) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 19)
	r.fieldMap["id"] = r.ID
	r.fieldMap["code"] = r.Code
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["color_by_reference_id"] = r.ColorByReferenceID
	r.fieldMap["resource_id"] = r.ResourceId
	r.fieldMap["xs2"] = r.XS2
	r.fieldMap["xs"] = r.XS
	r.fieldMap["s"] = r.S
	r.fieldMap["m"] = r.M
	r.fieldMap["l"] = r.L
	r.fieldMap["xl"] = r.XL
	r.fieldMap["xl2"] = r.XL2
	r.fieldMap["xl3"] = r.XL3
	r.fieldMap["xl4"] = r.XL4
	r.fieldMap["xl5"] = r.XL5
	r.fieldMap["xl6"] = r.XL6
	r.fieldMap["xl7"] = r.XL7
	r.fieldMap["xl8"] = r.XL8

}

func (r resourceByReference) clone(db *gorm.DB) resourceByReference {
	r.resourceByReferenceDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r resourceByReference) replaceDB(db *gorm.DB) resourceByReference {
	r.resourceByReferenceDo.ReplaceDB(db)
	return r
}

type resourceByReferenceBelongsToResource struct {
	db *gorm.DB

	field.RelationField

	Color struct {
		field.RelationField
	}
	Supplier struct {
		field.RelationField
	}
}

func (a resourceByReferenceBelongsToResource) Where(conds ...field.Expr) *resourceByReferenceBelongsToResource {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a resourceByReferenceBelongsToResource) WithContext(ctx context.Context) *resourceByReferenceBelongsToResource {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a resourceByReferenceBelongsToResource) Session(session *gorm.Session) *resourceByReferenceBelongsToResource {
	a.db = a.db.Session(session)
	return &a
}

func (a resourceByReferenceBelongsToResource) Model(m *models.ResourceByReference) *resourceByReferenceBelongsToResourceTx {
	return &resourceByReferenceBelongsToResourceTx{a.db.Model(m).Association(a.Name())}
}

type resourceByReferenceBelongsToResourceTx struct{ tx *gorm.Association }

func (a resourceByReferenceBelongsToResourceTx) Find() (result *models.Resource, err error) {
	return result, a.tx.Find(&result)
}

func (a resourceByReferenceBelongsToResourceTx) Append(values ...*models.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a resourceByReferenceBelongsToResourceTx) Replace(values ...*models.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a resourceByReferenceBelongsToResourceTx) Delete(values ...*models.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a resourceByReferenceBelongsToResourceTx) Clear() error {
	return a.tx.Clear()
}

func (a resourceByReferenceBelongsToResourceTx) Count() int64 {
	return a.tx.Count()
}

type resourceByReferenceDo struct{ gen.DO }

type IResourceByReferenceDo interface {
	gen.SubQuery
	Debug() IResourceByReferenceDo
	WithContext(ctx context.Context) IResourceByReferenceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResourceByReferenceDo
	WriteDB() IResourceByReferenceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResourceByReferenceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResourceByReferenceDo
	Not(conds ...gen.Condition) IResourceByReferenceDo
	Or(conds ...gen.Condition) IResourceByReferenceDo
	Select(conds ...field.Expr) IResourceByReferenceDo
	Where(conds ...gen.Condition) IResourceByReferenceDo
	Order(conds ...field.Expr) IResourceByReferenceDo
	Distinct(cols ...field.Expr) IResourceByReferenceDo
	Omit(cols ...field.Expr) IResourceByReferenceDo
	Join(table schema.Tabler, on ...field.Expr) IResourceByReferenceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResourceByReferenceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResourceByReferenceDo
	Group(cols ...field.Expr) IResourceByReferenceDo
	Having(conds ...gen.Condition) IResourceByReferenceDo
	Limit(limit int) IResourceByReferenceDo
	Offset(offset int) IResourceByReferenceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceByReferenceDo
	Unscoped() IResourceByReferenceDo
	Create(values ...*models.ResourceByReference) error
	CreateInBatches(values []*models.ResourceByReference, batchSize int) error
	Save(values ...*models.ResourceByReference) error
	First() (*models.ResourceByReference, error)
	Take() (*models.ResourceByReference, error)
	Last() (*models.ResourceByReference, error)
	Find() ([]*models.ResourceByReference, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ResourceByReference, err error)
	FindInBatches(result *[]*models.ResourceByReference, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ResourceByReference) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResourceByReferenceDo
	Assign(attrs ...field.AssignExpr) IResourceByReferenceDo
	Joins(fields ...field.RelationField) IResourceByReferenceDo
	Preload(fields ...field.RelationField) IResourceByReferenceDo
	FirstOrInit() (*models.ResourceByReference, error)
	FirstOrCreate() (*models.ResourceByReference, error)
	FindByPage(offset int, limit int) (result []*models.ResourceByReference, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResourceByReferenceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resourceByReferenceDo) Debug() IResourceByReferenceDo {
	return r.withDO(r.DO.Debug())
}

func (r resourceByReferenceDo) WithContext(ctx context.Context) IResourceByReferenceDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourceByReferenceDo) ReadDB() IResourceByReferenceDo {
	return r.Clauses(dbresolver.Read)
}

func (r resourceByReferenceDo) WriteDB() IResourceByReferenceDo {
	return r.Clauses(dbresolver.Write)
}

func (r resourceByReferenceDo) Session(config *gorm.Session) IResourceByReferenceDo {
	return r.withDO(r.DO.Session(config))
}

func (r resourceByReferenceDo) Clauses(conds ...clause.Expression) IResourceByReferenceDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourceByReferenceDo) Returning(value interface{}, columns ...string) IResourceByReferenceDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourceByReferenceDo) Not(conds ...gen.Condition) IResourceByReferenceDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourceByReferenceDo) Or(conds ...gen.Condition) IResourceByReferenceDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourceByReferenceDo) Select(conds ...field.Expr) IResourceByReferenceDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourceByReferenceDo) Where(conds ...gen.Condition) IResourceByReferenceDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourceByReferenceDo) Order(conds ...field.Expr) IResourceByReferenceDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourceByReferenceDo) Distinct(cols ...field.Expr) IResourceByReferenceDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourceByReferenceDo) Omit(cols ...field.Expr) IResourceByReferenceDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourceByReferenceDo) Join(table schema.Tabler, on ...field.Expr) IResourceByReferenceDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourceByReferenceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResourceByReferenceDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourceByReferenceDo) RightJoin(table schema.Tabler, on ...field.Expr) IResourceByReferenceDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourceByReferenceDo) Group(cols ...field.Expr) IResourceByReferenceDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourceByReferenceDo) Having(conds ...gen.Condition) IResourceByReferenceDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourceByReferenceDo) Limit(limit int) IResourceByReferenceDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourceByReferenceDo) Offset(offset int) IResourceByReferenceDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourceByReferenceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceByReferenceDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourceByReferenceDo) Unscoped() IResourceByReferenceDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourceByReferenceDo) Create(values ...*models.ResourceByReference) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourceByReferenceDo) CreateInBatches(values []*models.ResourceByReference, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourceByReferenceDo) Save(values ...*models.ResourceByReference) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourceByReferenceDo) First() (*models.ResourceByReference, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceByReference), nil
	}
}

func (r resourceByReferenceDo) Take() (*models.ResourceByReference, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceByReference), nil
	}
}

func (r resourceByReferenceDo) Last() (*models.ResourceByReference, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceByReference), nil
	}
}

func (r resourceByReferenceDo) Find() ([]*models.ResourceByReference, error) {
	result, err := r.DO.Find()
	return result.([]*models.ResourceByReference), err
}

func (r resourceByReferenceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ResourceByReference, err error) {
	buf := make([]*models.ResourceByReference, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourceByReferenceDo) FindInBatches(result *[]*models.ResourceByReference, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourceByReferenceDo) Attrs(attrs ...field.AssignExpr) IResourceByReferenceDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourceByReferenceDo) Assign(attrs ...field.AssignExpr) IResourceByReferenceDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourceByReferenceDo) Joins(fields ...field.RelationField) IResourceByReferenceDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resourceByReferenceDo) Preload(fields ...field.RelationField) IResourceByReferenceDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resourceByReferenceDo) FirstOrInit() (*models.ResourceByReference, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceByReference), nil
	}
}

func (r resourceByReferenceDo) FirstOrCreate() (*models.ResourceByReference, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceByReference), nil
	}
}

func (r resourceByReferenceDo) FindByPage(offset int, limit int) (result []*models.ResourceByReference, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourceByReferenceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resourceByReferenceDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resourceByReferenceDo) Delete(models ...*models.ResourceByReference) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resourceByReferenceDo) withDO(do gen.Dao) *resourceByReferenceDo {
	r.DO = *do.(*gen.DO)
	return r
}
