// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newFabricV(db *gorm.DB, opts ...gen.DOOption) fabricV {
	_fabricV := fabricV{}

	_fabricV.fabricVDo.UseDB(db, opts...)
	_fabricV.fabricVDo.UseModel(&models.FabricV{})

	tableName := _fabricV.fabricVDo.TableName()
	_fabricV.ALL = field.NewAsterisk(tableName)
	_fabricV.ID = field.NewUint(tableName, "id")
	_fabricV.Cost = field.NewFloat64(tableName, "cost")
	_fabricV.CreatedAt = field.NewTime(tableName, "created_at")
	_fabricV.DeletedAt = field.NewField(tableName, "deleted_at")
	_fabricV.FabricId = field.NewUint(tableName, "fabric_id")
	_fabricV.Fabric = fabricVBelongsToFabric{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Fabric", "models.Fabric"),
		Color: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Fabric.Color", "models.Color"),
		},
	}

	_fabricV.fillFieldMap()

	return _fabricV
}

type fabricV struct {
	fabricVDo

	ALL       field.Asterisk
	ID        field.Uint
	Cost      field.Float64
	CreatedAt field.Time
	DeletedAt field.Field
	FabricId  field.Uint
	Fabric    fabricVBelongsToFabric

	fieldMap map[string]field.Expr
}

func (f fabricV) Table(newTableName string) *fabricV {
	f.fabricVDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fabricV) As(alias string) *fabricV {
	f.fabricVDo.DO = *(f.fabricVDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fabricV) updateTableName(table string) *fabricV {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.Cost = field.NewFloat64(table, "cost")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.FabricId = field.NewUint(table, "fabric_id")

	f.fillFieldMap()

	return f
}

func (f *fabricV) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fabricV) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["cost"] = f.Cost
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["fabric_id"] = f.FabricId

}

func (f fabricV) clone(db *gorm.DB) fabricV {
	f.fabricVDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fabricV) replaceDB(db *gorm.DB) fabricV {
	f.fabricVDo.ReplaceDB(db)
	return f
}

type fabricVBelongsToFabric struct {
	db *gorm.DB

	field.RelationField

	Color struct {
		field.RelationField
	}
}

func (a fabricVBelongsToFabric) Where(conds ...field.Expr) *fabricVBelongsToFabric {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a fabricVBelongsToFabric) WithContext(ctx context.Context) *fabricVBelongsToFabric {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a fabricVBelongsToFabric) Session(session *gorm.Session) *fabricVBelongsToFabric {
	a.db = a.db.Session(session)
	return &a
}

func (a fabricVBelongsToFabric) Model(m *models.FabricV) *fabricVBelongsToFabricTx {
	return &fabricVBelongsToFabricTx{a.db.Model(m).Association(a.Name())}
}

type fabricVBelongsToFabricTx struct{ tx *gorm.Association }

func (a fabricVBelongsToFabricTx) Find() (result *models.Fabric, err error) {
	return result, a.tx.Find(&result)
}

func (a fabricVBelongsToFabricTx) Append(values ...*models.Fabric) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a fabricVBelongsToFabricTx) Replace(values ...*models.Fabric) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a fabricVBelongsToFabricTx) Delete(values ...*models.Fabric) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a fabricVBelongsToFabricTx) Clear() error {
	return a.tx.Clear()
}

func (a fabricVBelongsToFabricTx) Count() int64 {
	return a.tx.Count()
}

type fabricVDo struct{ gen.DO }

type IFabricVDo interface {
	gen.SubQuery
	Debug() IFabricVDo
	WithContext(ctx context.Context) IFabricVDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFabricVDo
	WriteDB() IFabricVDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFabricVDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFabricVDo
	Not(conds ...gen.Condition) IFabricVDo
	Or(conds ...gen.Condition) IFabricVDo
	Select(conds ...field.Expr) IFabricVDo
	Where(conds ...gen.Condition) IFabricVDo
	Order(conds ...field.Expr) IFabricVDo
	Distinct(cols ...field.Expr) IFabricVDo
	Omit(cols ...field.Expr) IFabricVDo
	Join(table schema.Tabler, on ...field.Expr) IFabricVDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFabricVDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFabricVDo
	Group(cols ...field.Expr) IFabricVDo
	Having(conds ...gen.Condition) IFabricVDo
	Limit(limit int) IFabricVDo
	Offset(offset int) IFabricVDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFabricVDo
	Unscoped() IFabricVDo
	Create(values ...*models.FabricV) error
	CreateInBatches(values []*models.FabricV, batchSize int) error
	Save(values ...*models.FabricV) error
	First() (*models.FabricV, error)
	Take() (*models.FabricV, error)
	Last() (*models.FabricV, error)
	Find() ([]*models.FabricV, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FabricV, err error)
	FindInBatches(result *[]*models.FabricV, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.FabricV) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFabricVDo
	Assign(attrs ...field.AssignExpr) IFabricVDo
	Joins(fields ...field.RelationField) IFabricVDo
	Preload(fields ...field.RelationField) IFabricVDo
	FirstOrInit() (*models.FabricV, error)
	FirstOrCreate() (*models.FabricV, error)
	FindByPage(offset int, limit int) (result []*models.FabricV, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFabricVDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fabricVDo) Debug() IFabricVDo {
	return f.withDO(f.DO.Debug())
}

func (f fabricVDo) WithContext(ctx context.Context) IFabricVDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fabricVDo) ReadDB() IFabricVDo {
	return f.Clauses(dbresolver.Read)
}

func (f fabricVDo) WriteDB() IFabricVDo {
	return f.Clauses(dbresolver.Write)
}

func (f fabricVDo) Session(config *gorm.Session) IFabricVDo {
	return f.withDO(f.DO.Session(config))
}

func (f fabricVDo) Clauses(conds ...clause.Expression) IFabricVDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fabricVDo) Returning(value interface{}, columns ...string) IFabricVDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fabricVDo) Not(conds ...gen.Condition) IFabricVDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fabricVDo) Or(conds ...gen.Condition) IFabricVDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fabricVDo) Select(conds ...field.Expr) IFabricVDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fabricVDo) Where(conds ...gen.Condition) IFabricVDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fabricVDo) Order(conds ...field.Expr) IFabricVDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fabricVDo) Distinct(cols ...field.Expr) IFabricVDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fabricVDo) Omit(cols ...field.Expr) IFabricVDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fabricVDo) Join(table schema.Tabler, on ...field.Expr) IFabricVDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fabricVDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFabricVDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fabricVDo) RightJoin(table schema.Tabler, on ...field.Expr) IFabricVDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fabricVDo) Group(cols ...field.Expr) IFabricVDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fabricVDo) Having(conds ...gen.Condition) IFabricVDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fabricVDo) Limit(limit int) IFabricVDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fabricVDo) Offset(offset int) IFabricVDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fabricVDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFabricVDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fabricVDo) Unscoped() IFabricVDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fabricVDo) Create(values ...*models.FabricV) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fabricVDo) CreateInBatches(values []*models.FabricV, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fabricVDo) Save(values ...*models.FabricV) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fabricVDo) First() (*models.FabricV, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricV), nil
	}
}

func (f fabricVDo) Take() (*models.FabricV, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricV), nil
	}
}

func (f fabricVDo) Last() (*models.FabricV, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricV), nil
	}
}

func (f fabricVDo) Find() ([]*models.FabricV, error) {
	result, err := f.DO.Find()
	return result.([]*models.FabricV), err
}

func (f fabricVDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FabricV, err error) {
	buf := make([]*models.FabricV, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fabricVDo) FindInBatches(result *[]*models.FabricV, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fabricVDo) Attrs(attrs ...field.AssignExpr) IFabricVDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fabricVDo) Assign(attrs ...field.AssignExpr) IFabricVDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fabricVDo) Joins(fields ...field.RelationField) IFabricVDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fabricVDo) Preload(fields ...field.RelationField) IFabricVDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fabricVDo) FirstOrInit() (*models.FabricV, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricV), nil
	}
}

func (f fabricVDo) FirstOrCreate() (*models.FabricV, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricV), nil
	}
}

func (f fabricVDo) FindByPage(offset int, limit int) (result []*models.FabricV, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fabricVDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fabricVDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fabricVDo) Delete(models ...*models.FabricV) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fabricVDo) withDO(do gen.Dao) *fabricVDo {
	f.DO = *do.(*gen.DO)
	return f
}
