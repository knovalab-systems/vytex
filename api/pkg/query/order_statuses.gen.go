// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newOrderStatus(db *gorm.DB, opts ...gen.DOOption) orderStatus {
	_orderStatus := orderStatus{}

	_orderStatus.orderStatusDo.UseDB(db, opts...)
	_orderStatus.orderStatusDo.UseModel(&models.OrderStatus{})

	tableName := _orderStatus.orderStatusDo.TableName()
	_orderStatus.ALL = field.NewAsterisk(tableName)
	_orderStatus.ID = field.NewUint(tableName, "id")
	_orderStatus.Name = field.NewString(tableName, "name")
	_orderStatus.Value = field.NewString(tableName, "value")

	_orderStatus.fillFieldMap()

	return _orderStatus
}

type orderStatus struct {
	orderStatusDo

	ALL   field.Asterisk
	ID    field.Uint
	Name  field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (o orderStatus) Table(newTableName string) *orderStatus {
	o.orderStatusDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderStatus) As(alias string) *orderStatus {
	o.orderStatusDo.DO = *(o.orderStatusDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderStatus) updateTableName(table string) *orderStatus {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.Name = field.NewString(table, "name")
	o.Value = field.NewString(table, "value")

	o.fillFieldMap()

	return o
}

func (o *orderStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderStatus) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["value"] = o.Value
}

func (o orderStatus) clone(db *gorm.DB) orderStatus {
	o.orderStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderStatus) replaceDB(db *gorm.DB) orderStatus {
	o.orderStatusDo.ReplaceDB(db)
	return o
}

type orderStatusDo struct{ gen.DO }

type IOrderStatusDo interface {
	gen.SubQuery
	Debug() IOrderStatusDo
	WithContext(ctx context.Context) IOrderStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderStatusDo
	WriteDB() IOrderStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderStatusDo
	Not(conds ...gen.Condition) IOrderStatusDo
	Or(conds ...gen.Condition) IOrderStatusDo
	Select(conds ...field.Expr) IOrderStatusDo
	Where(conds ...gen.Condition) IOrderStatusDo
	Order(conds ...field.Expr) IOrderStatusDo
	Distinct(cols ...field.Expr) IOrderStatusDo
	Omit(cols ...field.Expr) IOrderStatusDo
	Join(table schema.Tabler, on ...field.Expr) IOrderStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderStatusDo
	Group(cols ...field.Expr) IOrderStatusDo
	Having(conds ...gen.Condition) IOrderStatusDo
	Limit(limit int) IOrderStatusDo
	Offset(offset int) IOrderStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderStatusDo
	Unscoped() IOrderStatusDo
	Create(values ...*models.OrderStatus) error
	CreateInBatches(values []*models.OrderStatus, batchSize int) error
	Save(values ...*models.OrderStatus) error
	First() (*models.OrderStatus, error)
	Take() (*models.OrderStatus, error)
	Last() (*models.OrderStatus, error)
	Find() ([]*models.OrderStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderStatus, err error)
	FindInBatches(result *[]*models.OrderStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OrderStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderStatusDo
	Assign(attrs ...field.AssignExpr) IOrderStatusDo
	Joins(fields ...field.RelationField) IOrderStatusDo
	Preload(fields ...field.RelationField) IOrderStatusDo
	FirstOrInit() (*models.OrderStatus, error)
	FirstOrCreate() (*models.OrderStatus, error)
	FindByPage(offset int, limit int) (result []*models.OrderStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderStatusDo) Debug() IOrderStatusDo {
	return o.withDO(o.DO.Debug())
}

func (o orderStatusDo) WithContext(ctx context.Context) IOrderStatusDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderStatusDo) ReadDB() IOrderStatusDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderStatusDo) WriteDB() IOrderStatusDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderStatusDo) Session(config *gorm.Session) IOrderStatusDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderStatusDo) Clauses(conds ...clause.Expression) IOrderStatusDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderStatusDo) Returning(value interface{}, columns ...string) IOrderStatusDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderStatusDo) Not(conds ...gen.Condition) IOrderStatusDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderStatusDo) Or(conds ...gen.Condition) IOrderStatusDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderStatusDo) Select(conds ...field.Expr) IOrderStatusDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderStatusDo) Where(conds ...gen.Condition) IOrderStatusDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderStatusDo) Order(conds ...field.Expr) IOrderStatusDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderStatusDo) Distinct(cols ...field.Expr) IOrderStatusDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderStatusDo) Omit(cols ...field.Expr) IOrderStatusDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderStatusDo) Join(table schema.Tabler, on ...field.Expr) IOrderStatusDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderStatusDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderStatusDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderStatusDo) Group(cols ...field.Expr) IOrderStatusDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderStatusDo) Having(conds ...gen.Condition) IOrderStatusDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderStatusDo) Limit(limit int) IOrderStatusDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderStatusDo) Offset(offset int) IOrderStatusDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderStatusDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderStatusDo) Unscoped() IOrderStatusDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderStatusDo) Create(values ...*models.OrderStatus) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderStatusDo) CreateInBatches(values []*models.OrderStatus, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderStatusDo) Save(values ...*models.OrderStatus) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderStatusDo) First() (*models.OrderStatus, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStatus), nil
	}
}

func (o orderStatusDo) Take() (*models.OrderStatus, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStatus), nil
	}
}

func (o orderStatusDo) Last() (*models.OrderStatus, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStatus), nil
	}
}

func (o orderStatusDo) Find() ([]*models.OrderStatus, error) {
	result, err := o.DO.Find()
	return result.([]*models.OrderStatus), err
}

func (o orderStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderStatus, err error) {
	buf := make([]*models.OrderStatus, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderStatusDo) FindInBatches(result *[]*models.OrderStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderStatusDo) Attrs(attrs ...field.AssignExpr) IOrderStatusDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderStatusDo) Assign(attrs ...field.AssignExpr) IOrderStatusDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderStatusDo) Joins(fields ...field.RelationField) IOrderStatusDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderStatusDo) Preload(fields ...field.RelationField) IOrderStatusDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderStatusDo) FirstOrInit() (*models.OrderStatus, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStatus), nil
	}
}

func (o orderStatusDo) FirstOrCreate() (*models.OrderStatus, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStatus), nil
	}
}

func (o orderStatusDo) FindByPage(offset int, limit int) (result []*models.OrderStatus, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderStatusDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderStatusDo) Delete(models ...*models.OrderStatus) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderStatusDo) withDO(do gen.Dao) *orderStatusDo {
	o.DO = *do.(*gen.DO)
	return o
}
