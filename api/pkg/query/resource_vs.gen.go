// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newResourceV(db *gorm.DB, opts ...gen.DOOption) resourceV {
	_resourceV := resourceV{}

	_resourceV.resourceVDo.UseDB(db, opts...)
	_resourceV.resourceVDo.UseModel(&models.ResourceV{})

	tableName := _resourceV.resourceVDo.TableName()
	_resourceV.ALL = field.NewAsterisk(tableName)
	_resourceV.ID = field.NewUint(tableName, "id")
	_resourceV.Cost = field.NewFloat64(tableName, "cost")
	_resourceV.CreatedAt = field.NewTime(tableName, "created_at")
	_resourceV.DeletedAt = field.NewField(tableName, "deleted_at")
	_resourceV.ResourceId = field.NewUint(tableName, "resource_id")
	_resourceV.Resource = resourceVBelongsToResource{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Resource", "models.Resource"),
		Color: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Resource.Color", "models.Color"),
		},
	}

	_resourceV.fillFieldMap()

	return _resourceV
}

type resourceV struct {
	resourceVDo

	ALL        field.Asterisk
	ID         field.Uint
	Cost       field.Float64
	CreatedAt  field.Time
	DeletedAt  field.Field
	ResourceId field.Uint
	Resource   resourceVBelongsToResource

	fieldMap map[string]field.Expr
}

func (r resourceV) Table(newTableName string) *resourceV {
	r.resourceVDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resourceV) As(alias string) *resourceV {
	r.resourceVDo.DO = *(r.resourceVDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resourceV) updateTableName(table string) *resourceV {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.Cost = field.NewFloat64(table, "cost")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.ResourceId = field.NewUint(table, "resource_id")

	r.fillFieldMap()

	return r
}

func (r *resourceV) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resourceV) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["cost"] = r.Cost
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["resource_id"] = r.ResourceId

}

func (r resourceV) clone(db *gorm.DB) resourceV {
	r.resourceVDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r resourceV) replaceDB(db *gorm.DB) resourceV {
	r.resourceVDo.ReplaceDB(db)
	return r
}

type resourceVBelongsToResource struct {
	db *gorm.DB

	field.RelationField

	Color struct {
		field.RelationField
	}
}

func (a resourceVBelongsToResource) Where(conds ...field.Expr) *resourceVBelongsToResource {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a resourceVBelongsToResource) WithContext(ctx context.Context) *resourceVBelongsToResource {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a resourceVBelongsToResource) Session(session *gorm.Session) *resourceVBelongsToResource {
	a.db = a.db.Session(session)
	return &a
}

func (a resourceVBelongsToResource) Model(m *models.ResourceV) *resourceVBelongsToResourceTx {
	return &resourceVBelongsToResourceTx{a.db.Model(m).Association(a.Name())}
}

type resourceVBelongsToResourceTx struct{ tx *gorm.Association }

func (a resourceVBelongsToResourceTx) Find() (result *models.Resource, err error) {
	return result, a.tx.Find(&result)
}

func (a resourceVBelongsToResourceTx) Append(values ...*models.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a resourceVBelongsToResourceTx) Replace(values ...*models.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a resourceVBelongsToResourceTx) Delete(values ...*models.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a resourceVBelongsToResourceTx) Clear() error {
	return a.tx.Clear()
}

func (a resourceVBelongsToResourceTx) Count() int64 {
	return a.tx.Count()
}

type resourceVDo struct{ gen.DO }

type IResourceVDo interface {
	gen.SubQuery
	Debug() IResourceVDo
	WithContext(ctx context.Context) IResourceVDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResourceVDo
	WriteDB() IResourceVDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResourceVDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResourceVDo
	Not(conds ...gen.Condition) IResourceVDo
	Or(conds ...gen.Condition) IResourceVDo
	Select(conds ...field.Expr) IResourceVDo
	Where(conds ...gen.Condition) IResourceVDo
	Order(conds ...field.Expr) IResourceVDo
	Distinct(cols ...field.Expr) IResourceVDo
	Omit(cols ...field.Expr) IResourceVDo
	Join(table schema.Tabler, on ...field.Expr) IResourceVDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResourceVDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResourceVDo
	Group(cols ...field.Expr) IResourceVDo
	Having(conds ...gen.Condition) IResourceVDo
	Limit(limit int) IResourceVDo
	Offset(offset int) IResourceVDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceVDo
	Unscoped() IResourceVDo
	Create(values ...*models.ResourceV) error
	CreateInBatches(values []*models.ResourceV, batchSize int) error
	Save(values ...*models.ResourceV) error
	First() (*models.ResourceV, error)
	Take() (*models.ResourceV, error)
	Last() (*models.ResourceV, error)
	Find() ([]*models.ResourceV, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ResourceV, err error)
	FindInBatches(result *[]*models.ResourceV, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ResourceV) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResourceVDo
	Assign(attrs ...field.AssignExpr) IResourceVDo
	Joins(fields ...field.RelationField) IResourceVDo
	Preload(fields ...field.RelationField) IResourceVDo
	FirstOrInit() (*models.ResourceV, error)
	FirstOrCreate() (*models.ResourceV, error)
	FindByPage(offset int, limit int) (result []*models.ResourceV, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResourceVDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resourceVDo) Debug() IResourceVDo {
	return r.withDO(r.DO.Debug())
}

func (r resourceVDo) WithContext(ctx context.Context) IResourceVDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourceVDo) ReadDB() IResourceVDo {
	return r.Clauses(dbresolver.Read)
}

func (r resourceVDo) WriteDB() IResourceVDo {
	return r.Clauses(dbresolver.Write)
}

func (r resourceVDo) Session(config *gorm.Session) IResourceVDo {
	return r.withDO(r.DO.Session(config))
}

func (r resourceVDo) Clauses(conds ...clause.Expression) IResourceVDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourceVDo) Returning(value interface{}, columns ...string) IResourceVDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourceVDo) Not(conds ...gen.Condition) IResourceVDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourceVDo) Or(conds ...gen.Condition) IResourceVDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourceVDo) Select(conds ...field.Expr) IResourceVDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourceVDo) Where(conds ...gen.Condition) IResourceVDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourceVDo) Order(conds ...field.Expr) IResourceVDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourceVDo) Distinct(cols ...field.Expr) IResourceVDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourceVDo) Omit(cols ...field.Expr) IResourceVDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourceVDo) Join(table schema.Tabler, on ...field.Expr) IResourceVDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourceVDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResourceVDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourceVDo) RightJoin(table schema.Tabler, on ...field.Expr) IResourceVDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourceVDo) Group(cols ...field.Expr) IResourceVDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourceVDo) Having(conds ...gen.Condition) IResourceVDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourceVDo) Limit(limit int) IResourceVDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourceVDo) Offset(offset int) IResourceVDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourceVDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceVDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourceVDo) Unscoped() IResourceVDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourceVDo) Create(values ...*models.ResourceV) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourceVDo) CreateInBatches(values []*models.ResourceV, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourceVDo) Save(values ...*models.ResourceV) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourceVDo) First() (*models.ResourceV, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceV), nil
	}
}

func (r resourceVDo) Take() (*models.ResourceV, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceV), nil
	}
}

func (r resourceVDo) Last() (*models.ResourceV, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceV), nil
	}
}

func (r resourceVDo) Find() ([]*models.ResourceV, error) {
	result, err := r.DO.Find()
	return result.([]*models.ResourceV), err
}

func (r resourceVDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ResourceV, err error) {
	buf := make([]*models.ResourceV, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourceVDo) FindInBatches(result *[]*models.ResourceV, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourceVDo) Attrs(attrs ...field.AssignExpr) IResourceVDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourceVDo) Assign(attrs ...field.AssignExpr) IResourceVDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourceVDo) Joins(fields ...field.RelationField) IResourceVDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resourceVDo) Preload(fields ...field.RelationField) IResourceVDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resourceVDo) FirstOrInit() (*models.ResourceV, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceV), nil
	}
}

func (r resourceVDo) FirstOrCreate() (*models.ResourceV, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ResourceV), nil
	}
}

func (r resourceVDo) FindByPage(offset int, limit int) (result []*models.ResourceV, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourceVDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resourceVDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resourceVDo) Delete(models ...*models.ResourceV) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resourceVDo) withDO(do gen.Dao) *resourceVDo {
	r.DO = *do.(*gen.DO)
	return r
}
