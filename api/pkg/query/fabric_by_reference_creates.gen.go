// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/knovalab-systems/vytex/app/v1/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFabricByReferenceCreate(db *gorm.DB, opts ...gen.DOOption) fabricByReferenceCreate {
	_fabricByReferenceCreate := fabricByReferenceCreate{}

	_fabricByReferenceCreate.fabricByReferenceCreateDo.UseDB(db, opts...)
	_fabricByReferenceCreate.fabricByReferenceCreateDo.UseModel(&models.FabricByReferenceCreate{})

	tableName := _fabricByReferenceCreate.fabricByReferenceCreateDo.TableName()
	_fabricByReferenceCreate.ALL = field.NewAsterisk(tableName)
	_fabricByReferenceCreate.Fabric = field.NewUint(tableName, "fabric")
	_fabricByReferenceCreate.XS2 = field.NewFloat64(tableName, "xs2")
	_fabricByReferenceCreate.XS = field.NewFloat64(tableName, "xs")
	_fabricByReferenceCreate.S = field.NewFloat64(tableName, "s")
	_fabricByReferenceCreate.M = field.NewFloat64(tableName, "m")
	_fabricByReferenceCreate.L = field.NewFloat64(tableName, "l")
	_fabricByReferenceCreate.XL = field.NewFloat64(tableName, "xl")
	_fabricByReferenceCreate.XL2 = field.NewFloat64(tableName, "xl2")
	_fabricByReferenceCreate.XL3 = field.NewFloat64(tableName, "xl3")
	_fabricByReferenceCreate.XL4 = field.NewFloat64(tableName, "xl4")
	_fabricByReferenceCreate.XL5 = field.NewFloat64(tableName, "xl5")
	_fabricByReferenceCreate.XL6 = field.NewFloat64(tableName, "xl6")
	_fabricByReferenceCreate.XL7 = field.NewFloat64(tableName, "xl7")
	_fabricByReferenceCreate.XL8 = field.NewFloat64(tableName, "xl8")

	_fabricByReferenceCreate.fillFieldMap()

	return _fabricByReferenceCreate
}

type fabricByReferenceCreate struct {
	fabricByReferenceCreateDo

	ALL    field.Asterisk
	Fabric field.Uint
	XS2    field.Float64
	XS     field.Float64
	S      field.Float64
	M      field.Float64
	L      field.Float64
	XL     field.Float64
	XL2    field.Float64
	XL3    field.Float64
	XL4    field.Float64
	XL5    field.Float64
	XL6    field.Float64
	XL7    field.Float64
	XL8    field.Float64

	fieldMap map[string]field.Expr
}

func (f fabricByReferenceCreate) Table(newTableName string) *fabricByReferenceCreate {
	f.fabricByReferenceCreateDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fabricByReferenceCreate) As(alias string) *fabricByReferenceCreate {
	f.fabricByReferenceCreateDo.DO = *(f.fabricByReferenceCreateDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fabricByReferenceCreate) updateTableName(table string) *fabricByReferenceCreate {
	f.ALL = field.NewAsterisk(table)
	f.Fabric = field.NewUint(table, "fabric")
	f.XS2 = field.NewFloat64(table, "xs2")
	f.XS = field.NewFloat64(table, "xs")
	f.S = field.NewFloat64(table, "s")
	f.M = field.NewFloat64(table, "m")
	f.L = field.NewFloat64(table, "l")
	f.XL = field.NewFloat64(table, "xl")
	f.XL2 = field.NewFloat64(table, "xl2")
	f.XL3 = field.NewFloat64(table, "xl3")
	f.XL4 = field.NewFloat64(table, "xl4")
	f.XL5 = field.NewFloat64(table, "xl5")
	f.XL6 = field.NewFloat64(table, "xl6")
	f.XL7 = field.NewFloat64(table, "xl7")
	f.XL8 = field.NewFloat64(table, "xl8")

	f.fillFieldMap()

	return f
}

func (f *fabricByReferenceCreate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fabricByReferenceCreate) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 14)
	f.fieldMap["fabric"] = f.Fabric
	f.fieldMap["xs2"] = f.XS2
	f.fieldMap["xs"] = f.XS
	f.fieldMap["s"] = f.S
	f.fieldMap["m"] = f.M
	f.fieldMap["l"] = f.L
	f.fieldMap["xl"] = f.XL
	f.fieldMap["xl2"] = f.XL2
	f.fieldMap["xl3"] = f.XL3
	f.fieldMap["xl4"] = f.XL4
	f.fieldMap["xl5"] = f.XL5
	f.fieldMap["xl6"] = f.XL6
	f.fieldMap["xl7"] = f.XL7
	f.fieldMap["xl8"] = f.XL8
}

func (f fabricByReferenceCreate) clone(db *gorm.DB) fabricByReferenceCreate {
	f.fabricByReferenceCreateDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fabricByReferenceCreate) replaceDB(db *gorm.DB) fabricByReferenceCreate {
	f.fabricByReferenceCreateDo.ReplaceDB(db)
	return f
}

type fabricByReferenceCreateDo struct{ gen.DO }

type IFabricByReferenceCreateDo interface {
	gen.SubQuery
	Debug() IFabricByReferenceCreateDo
	WithContext(ctx context.Context) IFabricByReferenceCreateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFabricByReferenceCreateDo
	WriteDB() IFabricByReferenceCreateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFabricByReferenceCreateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFabricByReferenceCreateDo
	Not(conds ...gen.Condition) IFabricByReferenceCreateDo
	Or(conds ...gen.Condition) IFabricByReferenceCreateDo
	Select(conds ...field.Expr) IFabricByReferenceCreateDo
	Where(conds ...gen.Condition) IFabricByReferenceCreateDo
	Order(conds ...field.Expr) IFabricByReferenceCreateDo
	Distinct(cols ...field.Expr) IFabricByReferenceCreateDo
	Omit(cols ...field.Expr) IFabricByReferenceCreateDo
	Join(table schema.Tabler, on ...field.Expr) IFabricByReferenceCreateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFabricByReferenceCreateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFabricByReferenceCreateDo
	Group(cols ...field.Expr) IFabricByReferenceCreateDo
	Having(conds ...gen.Condition) IFabricByReferenceCreateDo
	Limit(limit int) IFabricByReferenceCreateDo
	Offset(offset int) IFabricByReferenceCreateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFabricByReferenceCreateDo
	Unscoped() IFabricByReferenceCreateDo
	Create(values ...*models.FabricByReferenceCreate) error
	CreateInBatches(values []*models.FabricByReferenceCreate, batchSize int) error
	Save(values ...*models.FabricByReferenceCreate) error
	First() (*models.FabricByReferenceCreate, error)
	Take() (*models.FabricByReferenceCreate, error)
	Last() (*models.FabricByReferenceCreate, error)
	Find() ([]*models.FabricByReferenceCreate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FabricByReferenceCreate, err error)
	FindInBatches(result *[]*models.FabricByReferenceCreate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.FabricByReferenceCreate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFabricByReferenceCreateDo
	Assign(attrs ...field.AssignExpr) IFabricByReferenceCreateDo
	Joins(fields ...field.RelationField) IFabricByReferenceCreateDo
	Preload(fields ...field.RelationField) IFabricByReferenceCreateDo
	FirstOrInit() (*models.FabricByReferenceCreate, error)
	FirstOrCreate() (*models.FabricByReferenceCreate, error)
	FindByPage(offset int, limit int) (result []*models.FabricByReferenceCreate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFabricByReferenceCreateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fabricByReferenceCreateDo) Debug() IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Debug())
}

func (f fabricByReferenceCreateDo) WithContext(ctx context.Context) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fabricByReferenceCreateDo) ReadDB() IFabricByReferenceCreateDo {
	return f.Clauses(dbresolver.Read)
}

func (f fabricByReferenceCreateDo) WriteDB() IFabricByReferenceCreateDo {
	return f.Clauses(dbresolver.Write)
}

func (f fabricByReferenceCreateDo) Session(config *gorm.Session) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Session(config))
}

func (f fabricByReferenceCreateDo) Clauses(conds ...clause.Expression) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fabricByReferenceCreateDo) Returning(value interface{}, columns ...string) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fabricByReferenceCreateDo) Not(conds ...gen.Condition) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fabricByReferenceCreateDo) Or(conds ...gen.Condition) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fabricByReferenceCreateDo) Select(conds ...field.Expr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fabricByReferenceCreateDo) Where(conds ...gen.Condition) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fabricByReferenceCreateDo) Order(conds ...field.Expr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fabricByReferenceCreateDo) Distinct(cols ...field.Expr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fabricByReferenceCreateDo) Omit(cols ...field.Expr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fabricByReferenceCreateDo) Join(table schema.Tabler, on ...field.Expr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fabricByReferenceCreateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fabricByReferenceCreateDo) RightJoin(table schema.Tabler, on ...field.Expr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fabricByReferenceCreateDo) Group(cols ...field.Expr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fabricByReferenceCreateDo) Having(conds ...gen.Condition) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fabricByReferenceCreateDo) Limit(limit int) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fabricByReferenceCreateDo) Offset(offset int) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fabricByReferenceCreateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fabricByReferenceCreateDo) Unscoped() IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fabricByReferenceCreateDo) Create(values ...*models.FabricByReferenceCreate) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fabricByReferenceCreateDo) CreateInBatches(values []*models.FabricByReferenceCreate, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fabricByReferenceCreateDo) Save(values ...*models.FabricByReferenceCreate) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fabricByReferenceCreateDo) First() (*models.FabricByReferenceCreate, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricByReferenceCreate), nil
	}
}

func (f fabricByReferenceCreateDo) Take() (*models.FabricByReferenceCreate, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricByReferenceCreate), nil
	}
}

func (f fabricByReferenceCreateDo) Last() (*models.FabricByReferenceCreate, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricByReferenceCreate), nil
	}
}

func (f fabricByReferenceCreateDo) Find() ([]*models.FabricByReferenceCreate, error) {
	result, err := f.DO.Find()
	return result.([]*models.FabricByReferenceCreate), err
}

func (f fabricByReferenceCreateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FabricByReferenceCreate, err error) {
	buf := make([]*models.FabricByReferenceCreate, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fabricByReferenceCreateDo) FindInBatches(result *[]*models.FabricByReferenceCreate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fabricByReferenceCreateDo) Attrs(attrs ...field.AssignExpr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fabricByReferenceCreateDo) Assign(attrs ...field.AssignExpr) IFabricByReferenceCreateDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fabricByReferenceCreateDo) Joins(fields ...field.RelationField) IFabricByReferenceCreateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fabricByReferenceCreateDo) Preload(fields ...field.RelationField) IFabricByReferenceCreateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fabricByReferenceCreateDo) FirstOrInit() (*models.FabricByReferenceCreate, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricByReferenceCreate), nil
	}
}

func (f fabricByReferenceCreateDo) FirstOrCreate() (*models.FabricByReferenceCreate, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.FabricByReferenceCreate), nil
	}
}

func (f fabricByReferenceCreateDo) FindByPage(offset int, limit int) (result []*models.FabricByReferenceCreate, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fabricByReferenceCreateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fabricByReferenceCreateDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fabricByReferenceCreateDo) Delete(models ...*models.FabricByReferenceCreate) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fabricByReferenceCreateDo) withDO(do gen.Dao) *fabricByReferenceCreateDo {
	f.DO = *do.(*gen.DO)
	return f
}
