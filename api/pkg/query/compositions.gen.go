// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newComposition(db *gorm.DB, opts ...gen.DOOption) composition {
	_composition := composition{}

	_composition.compositionDo.UseDB(db, opts...)
	_composition.compositionDo.UseModel(&models.Composition{})

	tableName := _composition.compositionDo.TableName()
	_composition.ALL = field.NewAsterisk(tableName)
	_composition.ID = field.NewUint(tableName, "id")
	_composition.Algod = field.NewUint(tableName, "algod")
	_composition.Elast = field.NewUint(tableName, "elast")
	_composition.Lino = field.NewUint(tableName, "lino")
	_composition.Nylon = field.NewUint(tableName, "nylon")
	_composition.Polye = field.NewUint(tableName, "polye")
	_composition.Rayon = field.NewUint(tableName, "rayon")
	_composition.Rayvis = field.NewUint(tableName, "rayvis")
	_composition.Tencel = field.NewUint(tableName, "tencel")
	_composition.Visco = field.NewUint(tableName, "visco")
	_composition.Hilom = field.NewUint(tableName, "hilom")

	_composition.fillFieldMap()

	return _composition
}

type composition struct {
	compositionDo

	ALL    field.Asterisk
	ID     field.Uint
	Algod  field.Uint
	Elast  field.Uint
	Lino   field.Uint
	Nylon  field.Uint
	Polye  field.Uint
	Rayon  field.Uint
	Rayvis field.Uint
	Tencel field.Uint
	Visco  field.Uint
	Hilom  field.Uint

	fieldMap map[string]field.Expr
}

func (c composition) Table(newTableName string) *composition {
	c.compositionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c composition) As(alias string) *composition {
	c.compositionDo.DO = *(c.compositionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *composition) updateTableName(table string) *composition {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.Algod = field.NewUint(table, "algod")
	c.Elast = field.NewUint(table, "elast")
	c.Lino = field.NewUint(table, "lino")
	c.Nylon = field.NewUint(table, "nylon")
	c.Polye = field.NewUint(table, "polye")
	c.Rayon = field.NewUint(table, "rayon")
	c.Rayvis = field.NewUint(table, "rayvis")
	c.Tencel = field.NewUint(table, "tencel")
	c.Visco = field.NewUint(table, "visco")
	c.Hilom = field.NewUint(table, "hilom")

	c.fillFieldMap()

	return c
}

func (c *composition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *composition) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["algod"] = c.Algod
	c.fieldMap["elast"] = c.Elast
	c.fieldMap["lino"] = c.Lino
	c.fieldMap["nylon"] = c.Nylon
	c.fieldMap["polye"] = c.Polye
	c.fieldMap["rayon"] = c.Rayon
	c.fieldMap["rayvis"] = c.Rayvis
	c.fieldMap["tencel"] = c.Tencel
	c.fieldMap["visco"] = c.Visco
	c.fieldMap["hilom"] = c.Hilom
}

func (c composition) clone(db *gorm.DB) composition {
	c.compositionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c composition) replaceDB(db *gorm.DB) composition {
	c.compositionDo.ReplaceDB(db)
	return c
}

type compositionDo struct{ gen.DO }

type ICompositionDo interface {
	gen.SubQuery
	Debug() ICompositionDo
	WithContext(ctx context.Context) ICompositionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICompositionDo
	WriteDB() ICompositionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICompositionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICompositionDo
	Not(conds ...gen.Condition) ICompositionDo
	Or(conds ...gen.Condition) ICompositionDo
	Select(conds ...field.Expr) ICompositionDo
	Where(conds ...gen.Condition) ICompositionDo
	Order(conds ...field.Expr) ICompositionDo
	Distinct(cols ...field.Expr) ICompositionDo
	Omit(cols ...field.Expr) ICompositionDo
	Join(table schema.Tabler, on ...field.Expr) ICompositionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICompositionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICompositionDo
	Group(cols ...field.Expr) ICompositionDo
	Having(conds ...gen.Condition) ICompositionDo
	Limit(limit int) ICompositionDo
	Offset(offset int) ICompositionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICompositionDo
	Unscoped() ICompositionDo
	Create(values ...*models.Composition) error
	CreateInBatches(values []*models.Composition, batchSize int) error
	Save(values ...*models.Composition) error
	First() (*models.Composition, error)
	Take() (*models.Composition, error)
	Last() (*models.Composition, error)
	Find() ([]*models.Composition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Composition, err error)
	FindInBatches(result *[]*models.Composition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Composition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICompositionDo
	Assign(attrs ...field.AssignExpr) ICompositionDo
	Joins(fields ...field.RelationField) ICompositionDo
	Preload(fields ...field.RelationField) ICompositionDo
	FirstOrInit() (*models.Composition, error)
	FirstOrCreate() (*models.Composition, error)
	FindByPage(offset int, limit int) (result []*models.Composition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICompositionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c compositionDo) Debug() ICompositionDo {
	return c.withDO(c.DO.Debug())
}

func (c compositionDo) WithContext(ctx context.Context) ICompositionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c compositionDo) ReadDB() ICompositionDo {
	return c.Clauses(dbresolver.Read)
}

func (c compositionDo) WriteDB() ICompositionDo {
	return c.Clauses(dbresolver.Write)
}

func (c compositionDo) Session(config *gorm.Session) ICompositionDo {
	return c.withDO(c.DO.Session(config))
}

func (c compositionDo) Clauses(conds ...clause.Expression) ICompositionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c compositionDo) Returning(value interface{}, columns ...string) ICompositionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c compositionDo) Not(conds ...gen.Condition) ICompositionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c compositionDo) Or(conds ...gen.Condition) ICompositionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c compositionDo) Select(conds ...field.Expr) ICompositionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c compositionDo) Where(conds ...gen.Condition) ICompositionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c compositionDo) Order(conds ...field.Expr) ICompositionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c compositionDo) Distinct(cols ...field.Expr) ICompositionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c compositionDo) Omit(cols ...field.Expr) ICompositionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c compositionDo) Join(table schema.Tabler, on ...field.Expr) ICompositionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c compositionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICompositionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c compositionDo) RightJoin(table schema.Tabler, on ...field.Expr) ICompositionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c compositionDo) Group(cols ...field.Expr) ICompositionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c compositionDo) Having(conds ...gen.Condition) ICompositionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c compositionDo) Limit(limit int) ICompositionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c compositionDo) Offset(offset int) ICompositionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c compositionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICompositionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c compositionDo) Unscoped() ICompositionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c compositionDo) Create(values ...*models.Composition) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c compositionDo) CreateInBatches(values []*models.Composition, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c compositionDo) Save(values ...*models.Composition) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c compositionDo) First() (*models.Composition, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Composition), nil
	}
}

func (c compositionDo) Take() (*models.Composition, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Composition), nil
	}
}

func (c compositionDo) Last() (*models.Composition, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Composition), nil
	}
}

func (c compositionDo) Find() ([]*models.Composition, error) {
	result, err := c.DO.Find()
	return result.([]*models.Composition), err
}

func (c compositionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Composition, err error) {
	buf := make([]*models.Composition, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c compositionDo) FindInBatches(result *[]*models.Composition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c compositionDo) Attrs(attrs ...field.AssignExpr) ICompositionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c compositionDo) Assign(attrs ...field.AssignExpr) ICompositionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c compositionDo) Joins(fields ...field.RelationField) ICompositionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c compositionDo) Preload(fields ...field.RelationField) ICompositionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c compositionDo) FirstOrInit() (*models.Composition, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Composition), nil
	}
}

func (c compositionDo) FirstOrCreate() (*models.Composition, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Composition), nil
	}
}

func (c compositionDo) FindByPage(offset int, limit int) (result []*models.Composition, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c compositionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c compositionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c compositionDo) Delete(models ...*models.Composition) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *compositionDo) withDO(do gen.Dao) *compositionDo {
	c.DO = *do.(*gen.DO)
	return c
}
