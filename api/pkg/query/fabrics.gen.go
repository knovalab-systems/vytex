// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newFabric(db *gorm.DB, opts ...gen.DOOption) fabric {
	_fabric := fabric{}

	_fabric.fabricDo.UseDB(db, opts...)
	_fabric.fabricDo.UseModel(&models.Fabric{})

	tableName := _fabric.fabricDo.TableName()
	_fabric.ALL = field.NewAsterisk(tableName)
	_fabric.ID = field.NewUint(tableName, "id")
	_fabric.Key = field.NewString(tableName, "key")
	_fabric.Name = field.NewString(tableName, "name")
	_fabric.Cost = field.NewFloat64(tableName, "cost")
	_fabric.Code = field.NewString(tableName, "code")
	_fabric.ColorID = field.NewUint(tableName, "color_id")
	_fabric.CreatedAt = field.NewTime(tableName, "created_at")
	_fabric.DeletedAt = field.NewField(tableName, "deleted_at")
	_fabric.Color = fabricBelongsToColor{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Color", "models.Color"),
	}

	_fabric.fillFieldMap()

	return _fabric
}

type fabric struct {
	fabricDo

	ALL       field.Asterisk
	ID        field.Uint
	Key       field.String
	Name      field.String
	Cost      field.Float64
	Code      field.String
	ColorID   field.Uint
	CreatedAt field.Time
	DeletedAt field.Field
	Color     fabricBelongsToColor

	fieldMap map[string]field.Expr
}

func (f fabric) Table(newTableName string) *fabric {
	f.fabricDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fabric) As(alias string) *fabric {
	f.fabricDo.DO = *(f.fabricDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fabric) updateTableName(table string) *fabric {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.Key = field.NewString(table, "key")
	f.Name = field.NewString(table, "name")
	f.Cost = field.NewFloat64(table, "cost")
	f.Code = field.NewString(table, "code")
	f.ColorID = field.NewUint(table, "color_id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *fabric) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fabric) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["key"] = f.Key
	f.fieldMap["name"] = f.Name
	f.fieldMap["cost"] = f.Cost
	f.fieldMap["code"] = f.Code
	f.fieldMap["color_id"] = f.ColorID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt

}

func (f fabric) clone(db *gorm.DB) fabric {
	f.fabricDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fabric) replaceDB(db *gorm.DB) fabric {
	f.fabricDo.ReplaceDB(db)
	return f
}

type fabricBelongsToColor struct {
	db *gorm.DB

	field.RelationField
}

func (a fabricBelongsToColor) Where(conds ...field.Expr) *fabricBelongsToColor {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a fabricBelongsToColor) WithContext(ctx context.Context) *fabricBelongsToColor {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a fabricBelongsToColor) Session(session *gorm.Session) *fabricBelongsToColor {
	a.db = a.db.Session(session)
	return &a
}

func (a fabricBelongsToColor) Model(m *models.Fabric) *fabricBelongsToColorTx {
	return &fabricBelongsToColorTx{a.db.Model(m).Association(a.Name())}
}

type fabricBelongsToColorTx struct{ tx *gorm.Association }

func (a fabricBelongsToColorTx) Find() (result *models.Color, err error) {
	return result, a.tx.Find(&result)
}

func (a fabricBelongsToColorTx) Append(values ...*models.Color) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a fabricBelongsToColorTx) Replace(values ...*models.Color) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a fabricBelongsToColorTx) Delete(values ...*models.Color) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a fabricBelongsToColorTx) Clear() error {
	return a.tx.Clear()
}

func (a fabricBelongsToColorTx) Count() int64 {
	return a.tx.Count()
}

type fabricDo struct{ gen.DO }

type IFabricDo interface {
	gen.SubQuery
	Debug() IFabricDo
	WithContext(ctx context.Context) IFabricDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFabricDo
	WriteDB() IFabricDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFabricDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFabricDo
	Not(conds ...gen.Condition) IFabricDo
	Or(conds ...gen.Condition) IFabricDo
	Select(conds ...field.Expr) IFabricDo
	Where(conds ...gen.Condition) IFabricDo
	Order(conds ...field.Expr) IFabricDo
	Distinct(cols ...field.Expr) IFabricDo
	Omit(cols ...field.Expr) IFabricDo
	Join(table schema.Tabler, on ...field.Expr) IFabricDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFabricDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFabricDo
	Group(cols ...field.Expr) IFabricDo
	Having(conds ...gen.Condition) IFabricDo
	Limit(limit int) IFabricDo
	Offset(offset int) IFabricDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFabricDo
	Unscoped() IFabricDo
	Create(values ...*models.Fabric) error
	CreateInBatches(values []*models.Fabric, batchSize int) error
	Save(values ...*models.Fabric) error
	First() (*models.Fabric, error)
	Take() (*models.Fabric, error)
	Last() (*models.Fabric, error)
	Find() ([]*models.Fabric, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Fabric, err error)
	FindInBatches(result *[]*models.Fabric, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Fabric) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFabricDo
	Assign(attrs ...field.AssignExpr) IFabricDo
	Joins(fields ...field.RelationField) IFabricDo
	Preload(fields ...field.RelationField) IFabricDo
	FirstOrInit() (*models.Fabric, error)
	FirstOrCreate() (*models.Fabric, error)
	FindByPage(offset int, limit int) (result []*models.Fabric, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFabricDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fabricDo) Debug() IFabricDo {
	return f.withDO(f.DO.Debug())
}

func (f fabricDo) WithContext(ctx context.Context) IFabricDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fabricDo) ReadDB() IFabricDo {
	return f.Clauses(dbresolver.Read)
}

func (f fabricDo) WriteDB() IFabricDo {
	return f.Clauses(dbresolver.Write)
}

func (f fabricDo) Session(config *gorm.Session) IFabricDo {
	return f.withDO(f.DO.Session(config))
}

func (f fabricDo) Clauses(conds ...clause.Expression) IFabricDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fabricDo) Returning(value interface{}, columns ...string) IFabricDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fabricDo) Not(conds ...gen.Condition) IFabricDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fabricDo) Or(conds ...gen.Condition) IFabricDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fabricDo) Select(conds ...field.Expr) IFabricDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fabricDo) Where(conds ...gen.Condition) IFabricDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fabricDo) Order(conds ...field.Expr) IFabricDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fabricDo) Distinct(cols ...field.Expr) IFabricDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fabricDo) Omit(cols ...field.Expr) IFabricDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fabricDo) Join(table schema.Tabler, on ...field.Expr) IFabricDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fabricDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFabricDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fabricDo) RightJoin(table schema.Tabler, on ...field.Expr) IFabricDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fabricDo) Group(cols ...field.Expr) IFabricDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fabricDo) Having(conds ...gen.Condition) IFabricDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fabricDo) Limit(limit int) IFabricDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fabricDo) Offset(offset int) IFabricDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fabricDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFabricDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fabricDo) Unscoped() IFabricDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fabricDo) Create(values ...*models.Fabric) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fabricDo) CreateInBatches(values []*models.Fabric, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fabricDo) Save(values ...*models.Fabric) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fabricDo) First() (*models.Fabric, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Fabric), nil
	}
}

func (f fabricDo) Take() (*models.Fabric, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Fabric), nil
	}
}

func (f fabricDo) Last() (*models.Fabric, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Fabric), nil
	}
}

func (f fabricDo) Find() ([]*models.Fabric, error) {
	result, err := f.DO.Find()
	return result.([]*models.Fabric), err
}

func (f fabricDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Fabric, err error) {
	buf := make([]*models.Fabric, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fabricDo) FindInBatches(result *[]*models.Fabric, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fabricDo) Attrs(attrs ...field.AssignExpr) IFabricDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fabricDo) Assign(attrs ...field.AssignExpr) IFabricDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fabricDo) Joins(fields ...field.RelationField) IFabricDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fabricDo) Preload(fields ...field.RelationField) IFabricDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fabricDo) FirstOrInit() (*models.Fabric, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Fabric), nil
	}
}

func (f fabricDo) FirstOrCreate() (*models.Fabric, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Fabric), nil
	}
}

func (f fabricDo) FindByPage(offset int, limit int) (result []*models.Fabric, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fabricDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fabricDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fabricDo) Delete(models ...*models.Fabric) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fabricDo) withDO(do gen.Dao) *fabricDo {
	f.DO = *do.(*gen.DO)
	return f
}
