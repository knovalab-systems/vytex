// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/knovalab-systems/vytex/app/v1/models"
)

func newPiece(db *gorm.DB, opts ...gen.DOOption) piece {
	_piece := piece{}

	_piece.pieceDo.UseDB(db, opts...)
	_piece.pieceDo.UseModel(&models.Piece{})

	tableName := _piece.pieceDo.TableName()
	_piece.ALL = field.NewAsterisk(tableName)
	_piece.ID = field.NewUint(tableName, "id")
	_piece.ImageID = field.NewString(tableName, "image_id")
	_piece.Image = pieceBelongsToImage{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Image", "models.Image"),
	}

	_piece.fillFieldMap()

	return _piece
}

type piece struct {
	pieceDo

	ALL     field.Asterisk
	ID      field.Uint
	ImageID field.String
	Image   pieceBelongsToImage

	fieldMap map[string]field.Expr
}

func (p piece) Table(newTableName string) *piece {
	p.pieceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p piece) As(alias string) *piece {
	p.pieceDo.DO = *(p.pieceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *piece) updateTableName(table string) *piece {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.ImageID = field.NewString(table, "image_id")

	p.fillFieldMap()

	return p
}

func (p *piece) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *piece) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["image_id"] = p.ImageID

}

func (p piece) clone(db *gorm.DB) piece {
	p.pieceDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p piece) replaceDB(db *gorm.DB) piece {
	p.pieceDo.ReplaceDB(db)
	return p
}

type pieceBelongsToImage struct {
	db *gorm.DB

	field.RelationField
}

func (a pieceBelongsToImage) Where(conds ...field.Expr) *pieceBelongsToImage {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pieceBelongsToImage) WithContext(ctx context.Context) *pieceBelongsToImage {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pieceBelongsToImage) Session(session *gorm.Session) *pieceBelongsToImage {
	a.db = a.db.Session(session)
	return &a
}

func (a pieceBelongsToImage) Model(m *models.Piece) *pieceBelongsToImageTx {
	return &pieceBelongsToImageTx{a.db.Model(m).Association(a.Name())}
}

type pieceBelongsToImageTx struct{ tx *gorm.Association }

func (a pieceBelongsToImageTx) Find() (result *models.Image, err error) {
	return result, a.tx.Find(&result)
}

func (a pieceBelongsToImageTx) Append(values ...*models.Image) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pieceBelongsToImageTx) Replace(values ...*models.Image) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pieceBelongsToImageTx) Delete(values ...*models.Image) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pieceBelongsToImageTx) Clear() error {
	return a.tx.Clear()
}

func (a pieceBelongsToImageTx) Count() int64 {
	return a.tx.Count()
}

type pieceDo struct{ gen.DO }

type IPieceDo interface {
	gen.SubQuery
	Debug() IPieceDo
	WithContext(ctx context.Context) IPieceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPieceDo
	WriteDB() IPieceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPieceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPieceDo
	Not(conds ...gen.Condition) IPieceDo
	Or(conds ...gen.Condition) IPieceDo
	Select(conds ...field.Expr) IPieceDo
	Where(conds ...gen.Condition) IPieceDo
	Order(conds ...field.Expr) IPieceDo
	Distinct(cols ...field.Expr) IPieceDo
	Omit(cols ...field.Expr) IPieceDo
	Join(table schema.Tabler, on ...field.Expr) IPieceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPieceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPieceDo
	Group(cols ...field.Expr) IPieceDo
	Having(conds ...gen.Condition) IPieceDo
	Limit(limit int) IPieceDo
	Offset(offset int) IPieceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPieceDo
	Unscoped() IPieceDo
	Create(values ...*models.Piece) error
	CreateInBatches(values []*models.Piece, batchSize int) error
	Save(values ...*models.Piece) error
	First() (*models.Piece, error)
	Take() (*models.Piece, error)
	Last() (*models.Piece, error)
	Find() ([]*models.Piece, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Piece, err error)
	FindInBatches(result *[]*models.Piece, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Piece) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPieceDo
	Assign(attrs ...field.AssignExpr) IPieceDo
	Joins(fields ...field.RelationField) IPieceDo
	Preload(fields ...field.RelationField) IPieceDo
	FirstOrInit() (*models.Piece, error)
	FirstOrCreate() (*models.Piece, error)
	FindByPage(offset int, limit int) (result []*models.Piece, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPieceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pieceDo) Debug() IPieceDo {
	return p.withDO(p.DO.Debug())
}

func (p pieceDo) WithContext(ctx context.Context) IPieceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pieceDo) ReadDB() IPieceDo {
	return p.Clauses(dbresolver.Read)
}

func (p pieceDo) WriteDB() IPieceDo {
	return p.Clauses(dbresolver.Write)
}

func (p pieceDo) Session(config *gorm.Session) IPieceDo {
	return p.withDO(p.DO.Session(config))
}

func (p pieceDo) Clauses(conds ...clause.Expression) IPieceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pieceDo) Returning(value interface{}, columns ...string) IPieceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pieceDo) Not(conds ...gen.Condition) IPieceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pieceDo) Or(conds ...gen.Condition) IPieceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pieceDo) Select(conds ...field.Expr) IPieceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pieceDo) Where(conds ...gen.Condition) IPieceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pieceDo) Order(conds ...field.Expr) IPieceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pieceDo) Distinct(cols ...field.Expr) IPieceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pieceDo) Omit(cols ...field.Expr) IPieceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pieceDo) Join(table schema.Tabler, on ...field.Expr) IPieceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pieceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPieceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pieceDo) RightJoin(table schema.Tabler, on ...field.Expr) IPieceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pieceDo) Group(cols ...field.Expr) IPieceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pieceDo) Having(conds ...gen.Condition) IPieceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pieceDo) Limit(limit int) IPieceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pieceDo) Offset(offset int) IPieceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pieceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPieceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pieceDo) Unscoped() IPieceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pieceDo) Create(values ...*models.Piece) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pieceDo) CreateInBatches(values []*models.Piece, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pieceDo) Save(values ...*models.Piece) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pieceDo) First() (*models.Piece, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Piece), nil
	}
}

func (p pieceDo) Take() (*models.Piece, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Piece), nil
	}
}

func (p pieceDo) Last() (*models.Piece, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Piece), nil
	}
}

func (p pieceDo) Find() ([]*models.Piece, error) {
	result, err := p.DO.Find()
	return result.([]*models.Piece), err
}

func (p pieceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Piece, err error) {
	buf := make([]*models.Piece, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pieceDo) FindInBatches(result *[]*models.Piece, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pieceDo) Attrs(attrs ...field.AssignExpr) IPieceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pieceDo) Assign(attrs ...field.AssignExpr) IPieceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pieceDo) Joins(fields ...field.RelationField) IPieceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pieceDo) Preload(fields ...field.RelationField) IPieceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pieceDo) FirstOrInit() (*models.Piece, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Piece), nil
	}
}

func (p pieceDo) FirstOrCreate() (*models.Piece, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Piece), nil
	}
}

func (p pieceDo) FindByPage(offset int, limit int) (result []*models.Piece, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pieceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pieceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pieceDo) Delete(models ...*models.Piece) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pieceDo) withDO(do gen.Dao) *pieceDo {
	p.DO = *do.(*gen.DO)
	return p
}
