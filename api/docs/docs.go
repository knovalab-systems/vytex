// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Given a correct user name and password get access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User's credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DataAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Remove the refresh token from the database and delete the cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Given a correct refresh cookie get access",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DataAuthResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/colors": {
            "get": {
                "description": "Get all the colors, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Colors"
                ],
                "summary": "Get colors from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Color"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new color",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Colors"
                ],
                "summary": "Create color",
                "parameters": [
                    {
                        "description": "Color create values",
                        "name": "models.ColorCreateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Color"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/colors/aggregate": {
            "get": {
                "description": "Get result of aggregate function from colors",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Colors"
                ],
                "summary": "Get aggregate from colors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AggregateData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/colors/{colorId}": {
            "get": {
                "description": "Get an color by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Colors"
                ],
                "summary": "Get a given color",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Color ID",
                        "name": "colorId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Color"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Updates the fields from color",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Colors"
                ],
                "summary": "Update use",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Color ID",
                        "name": "colorId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Color update values",
                        "name": "models.UpdateColorBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Color"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/custom/{customId}": {
            "get": {
                "description": "Get an custom by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customs"
                ],
                "summary": "Get a given custom",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Custom ID",
                        "name": "customId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Custom"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/customs": {
            "get": {
                "description": "Get all the customs, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customs"
                ],
                "summary": "Get customs from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Custom"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new custom",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customs"
                ],
                "summary": "Create custom",
                "parameters": [
                    {
                        "description": "Custom create values",
                        "name": "models.CustomCreateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Custom"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/customs/aggregate": {
            "get": {
                "description": "Get result of aggregate function from customs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customs"
                ],
                "summary": "Get aggregate from customs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AggregateData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/fabrics": {
            "get": {
                "description": "Get all the fabrics, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabrics"
                ],
                "summary": "Get fabrics from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Fabric"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new fabric",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabrics"
                ],
                "summary": "Create fabric",
                "parameters": [
                    {
                        "description": "Fabric create values",
                        "name": "models.FabricCreateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Fabric"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/fabrics/aggregate": {
            "get": {
                "description": "Get aggregate from fabrics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabrics"
                ],
                "summary": "Get aggregate from fabrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AggregateData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/fabrics/{fabricId}": {
            "get": {
                "description": "Get a fabric by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabrics"
                ],
                "summary": "Get a fabric",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Fabrics ID",
                        "name": "fabricId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Fabric"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "description": "Update a fabric by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabrics"
                ],
                "summary": "Update a fabric",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Fabric ID",
                        "name": "fabricId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fabric update values",
                        "name": "models.FabricUpdateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Fabric"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/images": {
            "post": {
                "description": "Create a new image",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Create image",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Image"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/order-status": {
            "get": {
                "description": "Get all the order status, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order status from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.OrderState"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "description": "Get all the orders, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get orders from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create an order",
                "parameters": [
                    {
                        "description": "Order create data",
                        "name": "models.OrderCreateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OrderCreateBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/orders/aggregate": {
            "get": {
                "description": "Get result of aggregate function from orders",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get aggregate from orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AggregateData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/orders/{orderId}": {
            "get": {
                "description": "Get an order by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get a given order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "description": "Updates the fields from order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order update values",
                        "name": "models.OrderUpdateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reference": {
            "post": {
                "description": "Create a new reference",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "References"
                ],
                "summary": "Create reference",
                "parameters": [
                    {
                        "description": "Reference create values",
                        "name": "models.ReferenceCreateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Reference"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/references": {
            "get": {
                "description": "Get all the references, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "References"
                ],
                "summary": "Get references from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Reference"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/references/times-by-task/{referenceId}": {
            "patch": {
                "description": "Update times of reference by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "References"
                ],
                "summary": "Update times of reference",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reference ID",
                        "name": "referenceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Times update values",
                        "name": "models.TimeByTaskReferenceUpdate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Reference"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/references/{refenceId}": {
            "get": {
                "description": "Get a reference by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "References"
                ],
                "summary": "Get a reference",
                "parameters": [
                    {
                        "type": "string",
                        "description": "References ID",
                        "name": "refenceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Reference"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/resources": {
            "get": {
                "description": "Get all the resources, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Get resources from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Resource"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new resource",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Create a resource",
                "parameters": [
                    {
                        "description": "Resource create values",
                        "name": "resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResourceCreateBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Resource"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/resources/aggregate": {
            "get": {
                "description": "Get result of aggregate function from resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Get aggregate from resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AggregateData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/resources/{id}": {
            "get": {
                "description": "Get a resource by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Get a resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Resource"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/resources/{resourceId}": {
            "patch": {
                "description": "Update a resource by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Update a resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "name": "resourceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resource update values",
                        "name": "models.ResourceUpdateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Resource"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "Get all the roles, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get roles from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Role"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create role",
                "parameters": [
                    {
                        "description": "Role create values",
                        "name": "models.RoleCreateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/roles/aggregate": {
            "get": {
                "description": "Get result of aggregate function from roles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get aggregate from roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AggregateData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/steps": {
            "get": {
                "description": "Get all the steps, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Steps"
                ],
                "summary": "Get steps from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Step"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/suppliers": {
            "get": {
                "description": "Get all the suppliers, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suppliers"
                ],
                "summary": "Get suppliers from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Supplier"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new supplier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suppliers"
                ],
                "summary": "Create supplier",
                "parameters": [
                    {
                        "description": "Supplier create values",
                        "name": "models.SupplierCreateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Supplier"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/suppliers/aggregate": {
            "get": {
                "description": "Get result of aggregate function from suppliers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suppliers"
                ],
                "summary": "Get aggregate from suppliers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AggregateData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/suppliers/{id}": {
            "get": {
                "description": "Get supplier by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suppliers"
                ],
                "summary": "Get supplier from db",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Supplier"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/suppliers/{supplierId}": {
            "patch": {
                "description": "Updates the fields from supplier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suppliers"
                ],
                "summary": "Update supplier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier ID",
                        "name": "supplierId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Supplier update values",
                        "name": "models.SupplierUpdateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Supplier"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/task-controls": {
            "get": {
                "description": "Get all the task controls, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TaskControls"
                ],
                "summary": "Get task controls from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TaskControl"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/task-controls/{taskControlId}": {
            "patch": {
                "description": "Updates the fields from task control",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TaskControls"
                ],
                "summary": "Update task control",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task control ID",
                        "name": "taskControlId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task control update values",
                        "name": "models.TaskControlUpdateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TaskControl"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all the users, limit for query o default limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get users from db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User create values",
                        "name": "models.UserCreateBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/aggregate": {
            "get": {
                "description": "Get result of aggregate function from users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get aggregate from users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AggregateData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "description": "Get the user who do the request with access token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get the curren user loggged",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "description": "Get an user by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a given user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Updates the fields from user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update use",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update values",
                        "name": "models.UpdateUserBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.AggregateData": {
            "type": "object",
            "properties": {
                "count": {}
            }
        },
        "models.Color": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "hex": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ColorByReference": {
            "type": "object",
            "properties": {
                "color": {
                    "$ref": "#/definitions/models.Color"
                },
                "color_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "fabrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FabricByReference"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "reference": {
                    "$ref": "#/definitions/models.Reference"
                },
                "reference_id": {
                    "type": "integer"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ResourceByReference"
                    }
                }
            }
        },
        "models.Composition": {
            "type": "object",
            "properties": {
                "algod": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "elast": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "hilom": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "id": {
                    "type": "integer"
                },
                "lino": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "nylon": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "polye": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "rayon": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "rayvis": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "tencel": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                },
                "visco": {
                    "type": "integer",
                    "maximum": 10000,
                    "minimum": 0
                }
            }
        },
        "models.Custom": {
            "type": "object",
            "properties": {
                "cancel_user": {
                    "$ref": "#/definitions/models.User"
                },
                "canceled_at": {
                    "type": "string"
                },
                "canceled_by": {
                    "type": "string"
                },
                "client": {
                    "type": "string"
                },
                "create_user": {
                    "$ref": "#/definitions/models.User"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "finished_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Order"
                    }
                }
            }
        },
        "models.DataAuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires": {
                    "type": "integer"
                }
            }
        },
        "models.Fabric": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "color": {
                    "$ref": "#/definitions/models.Color"
                },
                "color_id": {
                    "type": "integer"
                },
                "composition": {
                    "$ref": "#/definitions/models.Composition"
                },
                "composition_id": {
                    "type": "integer"
                },
                "cost": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "supplier": {
                    "$ref": "#/definitions/models.Supplier"
                },
                "supplier_id": {
                    "type": "integer"
                },
                "track": {
                    "type": "string"
                }
            }
        },
        "models.FabricByReference": {
            "type": "object",
            "properties": {
                "2XL": {
                    "type": "number",
                    "minimum": 0
                },
                "2XS": {
                    "type": "number",
                    "minimum": 0
                },
                "3XL": {
                    "type": "number",
                    "minimum": 0
                },
                "4XL": {
                    "type": "number",
                    "minimum": 0
                },
                "5XL": {
                    "type": "number",
                    "minimum": 0
                },
                "6XL": {
                    "type": "number",
                    "minimum": 0
                },
                "7XL": {
                    "type": "number",
                    "minimum": 0
                },
                "8XL": {
                    "type": "number",
                    "minimum": 0
                },
                "L": {
                    "type": "number",
                    "minimum": 0
                },
                "M": {
                    "type": "number",
                    "minimum": 0
                },
                "S": {
                    "type": "number",
                    "minimum": 0
                },
                "XL": {
                    "type": "number",
                    "minimum": 0
                },
                "XS": {
                    "type": "number",
                    "minimum": 0
                },
                "code": {
                    "type": "string"
                },
                "color_by_reference_id": {
                    "type": "integer"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "fabric": {
                    "$ref": "#/definitions/models.Fabric"
                },
                "fabric_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.Image": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "models.LoginUser": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "maxLength": 30
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "2XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "2XS": {
                    "type": "integer",
                    "minimum": 0
                },
                "3XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "4XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "5XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "6XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "7XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "8XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "L": {
                    "type": "integer",
                    "minimum": 0
                },
                "M": {
                    "type": "integer",
                    "minimum": 0
                },
                "S": {
                    "type": "integer",
                    "minimum": 0
                },
                "XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "XS": {
                    "type": "integer",
                    "minimum": 0
                },
                "cancel_user": {
                    "$ref": "#/definitions/models.User"
                },
                "canceled_at": {
                    "type": "string"
                },
                "canceled_by": {
                    "type": "string"
                },
                "color_by_reference": {
                    "$ref": "#/definitions/models.ColorByReference"
                },
                "color_by_reference_id": {
                    "type": "integer"
                },
                "create_user": {
                    "$ref": "#/definitions/models.User"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "custom": {
                    "$ref": "#/definitions/models.Custom"
                },
                "custom_id": {
                    "type": "integer"
                },
                "finished_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "order_state": {
                    "$ref": "#/definitions/models.OrderState"
                },
                "order_state_id": {
                    "type": "integer"
                },
                "started_at": {
                    "type": "string"
                }
            }
        },
        "models.OrderCreateBody": {
            "type": "object",
            "required": [
                "color_by_reference_id",
                "created_by",
                "custom_id"
            ],
            "properties": {
                "2XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "2XS": {
                    "type": "integer",
                    "minimum": 0
                },
                "3XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "4XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "5XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "6XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "7XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "8XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "L": {
                    "type": "integer",
                    "minimum": 0
                },
                "M": {
                    "type": "integer",
                    "minimum": 0
                },
                "S": {
                    "type": "integer",
                    "minimum": 0
                },
                "XL": {
                    "type": "integer",
                    "minimum": 0
                },
                "XS": {
                    "type": "integer",
                    "minimum": 0
                },
                "color_by_reference_id": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "custom_id": {
                    "type": "integer"
                }
            }
        },
        "models.OrderState": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.Reference": {
            "type": "object",
            "properties": {
                "back": {
                    "type": "string"
                },
                "back_image": {
                    "$ref": "#/definitions/models.Image"
                },
                "code": {
                    "type": "string"
                },
                "colors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ColorByReference"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "front": {
                    "type": "string"
                },
                "front_image": {
                    "$ref": "#/definitions/models.Image"
                },
                "id": {
                    "type": "integer"
                },
                "time_by_task": {
                    "$ref": "#/definitions/models.TimeByTask"
                },
                "time_by_task_id": {
                    "type": "integer"
                },
                "track": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "models.Resource": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "color": {
                    "$ref": "#/definitions/models.Color"
                },
                "color_id": {
                    "type": "integer"
                },
                "cost": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "supplier": {
                    "$ref": "#/definitions/models.Supplier"
                },
                "supplier_id": {
                    "type": "integer"
                },
                "track": {
                    "type": "string"
                }
            }
        },
        "models.ResourceByReference": {
            "type": "object",
            "properties": {
                "2XL": {
                    "type": "number",
                    "minimum": 0
                },
                "2XS": {
                    "type": "number",
                    "minimum": 0
                },
                "3XL": {
                    "type": "number",
                    "minimum": 0
                },
                "4XL": {
                    "type": "number",
                    "minimum": 0
                },
                "5XL": {
                    "type": "number",
                    "minimum": 0
                },
                "6XL": {
                    "type": "number",
                    "minimum": 0
                },
                "7XL": {
                    "type": "number",
                    "minimum": 0
                },
                "8XL": {
                    "type": "number",
                    "minimum": 0
                },
                "L": {
                    "type": "number",
                    "minimum": 0
                },
                "M": {
                    "type": "number",
                    "minimum": 0
                },
                "S": {
                    "type": "number",
                    "minimum": 0
                },
                "XL": {
                    "type": "number",
                    "minimum": 0
                },
                "XS": {
                    "type": "number",
                    "minimum": 0
                },
                "code": {
                    "type": "string"
                },
                "color_by_reference_id": {
                    "type": "integer"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "resource": {
                    "$ref": "#/definitions/models.Resource"
                },
                "resource_id": {
                    "type": "integer"
                }
            }
        },
        "models.ResourceCreateBody": {
            "type": "object",
            "required": [
                "code",
                "color_id",
                "cost",
                "name",
                "supplier_id"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "color_id": {
                    "type": "integer"
                },
                "cost": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "supplier_id": {
                    "type": "integer"
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/models.RoleCode"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.RoleCode": {
            "type": "string",
            "enum": [
                "admin",
                "designer",
                "propsupervisor",
                "cortepsupervisor"
            ],
            "x-enum-varnames": [
                "ADMIN_VALUE",
                "DESIGNER_VALUE",
                "PRO_SUPERVISOR_VALUE",
                "CORTE_SUPERVISOR_VALUE"
            ]
        },
        "models.Step": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Task"
                    }
                },
                "value": {
                    "$ref": "#/definitions/models.StepValue"
                }
            }
        },
        "models.StepValue": {
            "type": "string",
            "enum": [
                "corte"
            ],
            "x-enum-varnames": [
                "Corte"
            ]
        },
        "models.Supplier": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nit": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "step": {
                    "$ref": "#/definitions/models.Step"
                },
                "step_id": {
                    "type": "integer"
                },
                "value": {
                    "$ref": "#/definitions/models.TaskValue"
                }
            }
        },
        "models.TaskControl": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "finished_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "next": {
                    "$ref": "#/definitions/models.TaskControl"
                },
                "next_id": {
                    "type": "integer"
                },
                "order": {
                    "$ref": "#/definitions/models.Order"
                },
                "order_id": {
                    "type": "integer"
                },
                "previous": {
                    "$ref": "#/definitions/models.TaskControl"
                },
                "previous_id": {
                    "type": "integer"
                },
                "rejected_at": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "task": {
                    "$ref": "#/definitions/models.Task"
                },
                "task_id": {
                    "type": "integer"
                }
            }
        },
        "models.TaskValue": {
            "type": "string",
            "enum": [
                "trazar",
                "plantear",
                "tender",
                "cortar",
                "paquetear"
            ],
            "x-enum-varnames": [
                "Trazar",
                "Plantear",
                "Tender",
                "Cortar",
                "Paquetear"
            ]
        },
        "models.TimeByTask": {
            "type": "object",
            "properties": {
                "acabados": {
                    "type": "integer"
                },
                "armar": {
                    "type": "integer"
                },
                "bolsas": {
                    "type": "integer"
                },
                "cerrar": {
                    "type": "integer"
                },
                "cortar": {
                    "type": "integer"
                },
                "empacar": {
                    "type": "integer"
                },
                "figurar": {
                    "type": "integer"
                },
                "filetear": {
                    "type": "integer"
                },
                "gafetes": {
                    "type": "integer"
                },
                "grabar": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "marquilla": {
                    "type": "integer"
                },
                "organizar": {
                    "type": "integer"
                },
                "paletizar": {
                    "type": "integer"
                },
                "paquetear": {
                    "type": "integer"
                },
                "plantear": {
                    "type": "integer"
                },
                "presillar": {
                    "type": "integer"
                },
                "pulir": {
                    "type": "integer"
                },
                "revisar": {
                    "type": "integer"
                },
                "tapar": {
                    "type": "integer"
                },
                "tender": {
                    "type": "integer"
                },
                "tiquetear": {
                    "type": "integer"
                },
                "trazar": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "role_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Vytex API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
