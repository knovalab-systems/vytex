basePath: /api/v1
consumes:
- application/json
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.AggregateData:
    properties:
      count: {}
    type: object
  models.Color:
    properties:
      code:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      hex:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.ColorByReference:
    properties:
      color:
        $ref: '#/definitions/models.Color'
      color_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      fabrics:
        items:
          $ref: '#/definitions/models.FabricByReference'
        type: array
      id:
        type: integer
      reference_:
        $ref: '#/definitions/models.Reference'
      reference_id:
        type: integer
      resources:
        items:
          $ref: '#/definitions/models.ResourceByReference'
        type: array
    type: object
  models.Composition:
    properties:
      algod:
        maximum: 10000
        minimum: 0
        type: integer
      elast:
        maximum: 10000
        minimum: 0
        type: integer
      hilom:
        maximum: 10000
        minimum: 0
        type: integer
      id:
        type: integer
      lino:
        maximum: 10000
        minimum: 0
        type: integer
      nylon:
        maximum: 10000
        minimum: 0
        type: integer
      polye:
        maximum: 10000
        minimum: 0
        type: integer
      rayon:
        maximum: 10000
        minimum: 0
        type: integer
      rayvis:
        maximum: 10000
        minimum: 0
        type: integer
      tencel:
        maximum: 10000
        minimum: 0
        type: integer
      visco:
        maximum: 10000
        minimum: 0
        type: integer
    type: object
  models.Custom:
    properties:
      cancel_user:
        $ref: '#/definitions/models.User'
      canceled_at:
        type: string
      canceled_by:
        type: string
      client:
        type: string
      create_user:
        $ref: '#/definitions/models.User'
      created_at:
        type: string
      created_by:
        type: string
      finished_at:
        type: string
      id:
        type: integer
      orders:
        items:
          $ref: '#/definitions/models.Order'
        type: array
    type: object
  models.DataAuthResponse:
    properties:
      access_token:
        type: string
      expires:
        type: integer
    type: object
  models.Fabric:
    properties:
      code:
        type: string
      color:
        $ref: '#/definitions/models.Color'
      color_id:
        type: integer
      composition:
        $ref: '#/definitions/models.Composition'
      composition_id:
        type: integer
      cost:
        type: number
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      supplier:
        $ref: '#/definitions/models.Supplier'
      supplier_id:
        type: integer
      track:
        type: string
    type: object
  models.FabricByReference:
    properties:
      2XL:
        minimum: 0
        type: number
      2XS:
        minimum: 0
        type: number
      3XL:
        minimum: 0
        type: number
      4XL:
        minimum: 0
        type: number
      5XL:
        minimum: 0
        type: number
      6XL:
        minimum: 0
        type: number
      7XL:
        minimum: 0
        type: number
      8XL:
        minimum: 0
        type: number
      L:
        minimum: 0
        type: number
      M:
        minimum: 0
        type: number
      S:
        minimum: 0
        type: number
      XL:
        minimum: 0
        type: number
      XS:
        minimum: 0
        type: number
      code:
        type: string
      color_by_reference_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      fabric:
        $ref: '#/definitions/models.Fabric'
      fabric_id:
        type: integer
      id:
        type: integer
    type: object
  models.Image:
    properties:
      id:
        type: string
      location:
        type: string
    type: object
  models.LoginUser:
    properties:
      password:
        maxLength: 20
        minLength: 8
        type: string
      username:
        maxLength: 30
        type: string
    required:
    - password
    - username
    type: object
  models.Order:
    properties:
      2XL:
        minimum: 0
        type: integer
      2XS:
        minimum: 0
        type: integer
      3XL:
        minimum: 0
        type: integer
      4XL:
        minimum: 0
        type: integer
      5XL:
        minimum: 0
        type: integer
      6XL:
        minimum: 0
        type: integer
      7XL:
        minimum: 0
        type: integer
      8XL:
        minimum: 0
        type: integer
      L:
        minimum: 0
        type: integer
      M:
        minimum: 0
        type: integer
      S:
        minimum: 0
        type: integer
      XL:
        minimum: 0
        type: integer
      XS:
        minimum: 0
        type: integer
      cancel_user:
        $ref: '#/definitions/models.User'
      canceled_at:
        type: string
      canceled_by:
        type: string
      color_by_reference:
        $ref: '#/definitions/models.ColorByReference'
      color_by_reference_id:
        type: integer
      create_user:
        $ref: '#/definitions/models.User'
      created_at:
        type: string
      created_by:
        type: string
      custom:
        $ref: '#/definitions/models.Custom'
      custom_id:
        type: integer
      finished_at:
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/models.StatusOrder'
    type: object
  models.OrderCreateBody:
    properties:
      2XL:
        minimum: 0
        type: integer
      2XS:
        minimum: 0
        type: integer
      3XL:
        minimum: 0
        type: integer
      4XL:
        minimum: 0
        type: integer
      5XL:
        minimum: 0
        type: integer
      6XL:
        minimum: 0
        type: integer
      7XL:
        minimum: 0
        type: integer
      8XL:
        minimum: 0
        type: integer
      L:
        minimum: 0
        type: integer
      M:
        minimum: 0
        type: integer
      S:
        minimum: 0
        type: integer
      XL:
        minimum: 0
        type: integer
      XS:
        minimum: 0
        type: integer
      color_by_reference_id:
        type: integer
      created_by:
        type: string
      custom_id:
        type: integer
    required:
    - color_by_reference_id
    - created_by
    - custom_id
    type: object
  models.Reference:
    properties:
      back:
        type: string
      back_image:
        $ref: '#/definitions/models.Image'
      code:
        type: string
      colors:
        items:
          $ref: '#/definitions/models.ColorByReference'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      front:
        type: string
      front_image:
        $ref: '#/definitions/models.Image'
      id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Resource:
    properties:
      code:
        type: string
      color:
        $ref: '#/definitions/models.Color'
      color_id:
        type: integer
      cost:
        type: number
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      supplier:
        $ref: '#/definitions/models.Supplier'
      supplier_id:
        type: integer
      track:
        type: string
    type: object
  models.ResourceByReference:
    properties:
      2XL:
        minimum: 0
        type: number
      2XS:
        minimum: 0
        type: number
      3XL:
        minimum: 0
        type: number
      4XL:
        minimum: 0
        type: number
      5XL:
        minimum: 0
        type: number
      6XL:
        minimum: 0
        type: number
      7XL:
        minimum: 0
        type: number
      8XL:
        minimum: 0
        type: number
      L:
        minimum: 0
        type: number
      M:
        minimum: 0
        type: number
      S:
        minimum: 0
        type: number
      XL:
        minimum: 0
        type: number
      XS:
        minimum: 0
        type: number
      code:
        type: string
      color_by_reference_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      resource:
        $ref: '#/definitions/models.Resource'
      resource_id:
        type: integer
    type: object
  models.ResourceCreateBody:
    properties:
      code:
        type: string
      color_id:
        type: integer
      cost:
        type: number
      name:
        type: string
      supplier_id:
        type: integer
    required:
    - code
    - color_id
    - cost
    - name
    - supplier_id
    type: object
  models.StatusOrder:
    enum:
    - Created
    type: string
    x-enum-varnames:
    - Created
  models.Supplier:
    properties:
      brand:
        type: string
      code:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      nit:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  title: Vytex API
  version: "0.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Given a correct user name and password get access
      parameters:
      - description: User's credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataAuthResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Remove the refresh token from the database and delete the cookie
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Logout
      tags:
      - Auth
  /auth/refresh:
    post:
      description: Given a correct refresh cookie get access
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataAuthResponse'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Refresh
      tags:
      - Auth
  /colors:
    get:
      description: Get all the colors, limit for query o default limit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Color'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get colors from db
      tags:
      - Colors
    post:
      description: Create a new color
      parameters:
      - description: Color create values
        in: body
        name: models.ColorCreateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Color'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create color
      tags:
      - Colors
  /colors/{colorId}:
    post:
      description: Updates the fields from color
      parameters:
      - description: Color ID
        in: path
        name: colorId
        required: true
        type: string
      - description: Color update values
        in: body
        name: models.UpdateColorBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Color'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update use
      tags:
      - Colors
  /colors/aggregate:
    get:
      description: Get result of aggregate function from colors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AggregateData'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get aggregate from colors
      tags:
      - Colors
  /colors/colorId:
    get:
      description: Get an color by its ID
      parameters:
      - description: Color ID
        in: path
        name: colorId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Color'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get a given color
      tags:
      - Colors
  /custom/customId:
    get:
      description: Get an custom by its ID
      parameters:
      - description: Custom ID
        in: path
        name: customId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Custom'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get a given custom
      tags:
      - customs
  /customs:
    get:
      description: Get all the customs, limit for query o default limit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Custom'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get customs from db
      tags:
      - Customs
    post:
      description: Create a new custom
      parameters:
      - description: Custom create values
        in: body
        name: models.CustomCreateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Custom'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create custom
      tags:
      - Customs
  /customs/aggregate:
    get:
      description: Get result of aggregate function from customs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AggregateData'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get aggregate from customs
      tags:
      - Customs
  /fabrics:
    get:
      description: Get all the fabrics, limit for query o default limit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Fabric'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get fabrics from db
      tags:
      - Fabrics
    post:
      description: Create a new fabric
      parameters:
      - description: Fabric create values
        in: body
        name: models.FabricCreateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Fabric'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create fabric
      tags:
      - Fabrics
  /fabrics/aggregate:
    get:
      description: Get aggregate from fabrics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AggregateData'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get aggregate from fabrics
      tags:
      - Fabrics
  /fabrics/fabricId:
    get:
      description: Get a fabric by id
      parameters:
      - description: Fabrics ID
        in: path
        name: fabricId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Fabric'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get a fabric
      tags:
      - Fabrics
    patch:
      description: Update a fabric by id
      parameters:
      - description: Fabric ID
        in: path
        name: fabricId
        required: true
        type: string
      - description: Fabric update values
        in: body
        name: models.FabricUpdateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Fabric'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update a fabric
      tags:
      - Fabrics
  /images:
    post:
      description: Create a new image
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Image'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create image
      tags:
      - Files
  /orders:
    get:
      description: Get all the orders, limit for query o default limit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get orders from db
      tags:
      - Orders
    post:
      description: Create a new order
      parameters:
      - description: Order create data
        in: body
        name: models.OrderCreateBody
        required: true
        schema:
          $ref: '#/definitions/models.OrderCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create an order
      tags:
      - Orders
  /orders/aggregate:
    get:
      description: Get result of aggregate function from orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AggregateData'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get aggregate from orders
      tags:
      - Orders
  /reference:
    post:
      description: Create a new reference
      parameters:
      - description: Reference create values
        in: body
        name: models.ReferenceCreateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Reference'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create reference
      tags:
      - References
  /references:
    get:
      description: Get all the references, limit for query o default limit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Reference'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get references from db
      tags:
      - References
  /resources:
    get:
      description: Get all the resources, limit for query o default limit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Resource'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get resources from db
      tags:
      - Resources
    post:
      description: Create a new resource
      parameters:
      - description: Resource create values
        in: body
        name: resource
        required: true
        schema:
          $ref: '#/definitions/models.ResourceCreateBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Resource'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create a resource
      tags:
      - Resources
  /resources/{id}:
    get:
      description: Get a resource by id
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Resource'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get a resource
      tags:
      - Resources
  /resources/{resourceId}:
    patch:
      description: Update a resource by id
      parameters:
      - description: Resource ID
        in: path
        name: resourceId
        required: true
        type: string
      - description: Resource update values
        in: body
        name: models.ResourceUpdateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Resource'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update a resource
      tags:
      - Resources
  /resources/aggregate:
    get:
      description: Get result of aggregate function from resources
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AggregateData'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get aggregate from resources
      tags:
      - Resources
  /suppliers:
    get:
      description: Get all the suppliers, limit for query o default limit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Supplier'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get suppliers from db
      tags:
      - Suppliers
    post:
      description: Create a new supplier
      parameters:
      - description: Supplier create values
        in: body
        name: models.SupplierCreateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Supplier'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Create supplier
      tags:
      - Suppliers
  /suppliers/{id}:
    get:
      description: Get supplier by id
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Supplier'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Get supplier from db
      tags:
      - Suppliers
  /suppliers/{supplierId}:
    patch:
      description: Updates the fields from supplier
      parameters:
      - description: Supplier ID
        in: path
        name: supplierId
        required: true
        type: string
      - description: Supplier update values
        in: body
        name: models.SupplierUpdateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Supplier'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update supplier
      tags:
      - Suppliers
  /suppliers/aggregate:
    get:
      description: Get result of aggregate function from suppliers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AggregateData'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get aggregate from suppliers
      tags:
      - Suppliers
  /users:
    get:
      description: Get all the users, limit for query o default limit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get users from db
      tags:
      - Users
    post:
      description: Create a new user
      parameters:
      - description: User create values
        in: body
        name: models.UserCreateBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create user
      tags:
      - Users
  /users/{userId}:
    post:
      description: Updates the fields from user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User update values
        in: body
        name: models.UpdateUserBody
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update use
      tags:
      - Users
  /users/aggregate:
    get:
      description: Get result of aggregate function from users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AggregateData'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get aggregate from users
      tags:
      - Users
  /users/me:
    get:
      description: Get the user who do the request with access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get the curren user loggged
      tags:
      - Users
  /users/userId:
    get:
      description: Get an user by its ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get a given user
      tags:
      - Users
swagger: "2.0"
